[{"path":"https://davidbolin.github.io/ngme2/articles/config_OSX.html","id":"install-a-openmp-supported-clang-as-default-cc-compiler-","dir":"Articles","previous_headings":"","what":"1. Install a OpenMP supported clang as default C/C++ compiler.","title":"Ngme2 Configuration in OS X","text":"’s need install another compiler supports OpenMP. use homebrew installing llvm clang compiler using following scripts. (Check homebrew can just run following command install homebrew.) successful, able see following prompt. make llvm clang default compiler, need update PATH variable, reopen terminal make work: Now able use llvm clang OpenMP support. Let’s test : case, llvm lib include folder already added default clang search path. (can check search path run commands like clang hello.cpp -v, otherwise may need include mannually -L -, can also export system variable suggested, use makefile compile).","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ➜ brew install llvm  ... To use the bundled libc++ please add the following LDFLAGS:   LDFLAGS=\"-L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++\"  llvm is keg-only, which means it was not symlinked into /usr/local, because macOS already provides this software and installing another version in parallel can cause all kinds of trouble.  If you need to have llvm first in your PATH, run:   echo 'export PATH=\"/usr/local/opt/llvm/bin:$PATH\"' >> ~/.zshrc  For compilers to find llvm you may need to set:   export LDFLAGS=\"-L/usr/local/opt/llvm/lib\"   export CPPFLAGS=\"-I/usr/local/opt/llvm/include\" ➜ echo 'export PATH=\"/usr/local/opt/llvm/bin:$PATH\"' >> ~/.zshrc ➜ clang -fopenmp hello.cpp"},{"path":"https://davidbolin.github.io/ngme2/articles/config_OSX.html","id":"configure-the-r-environment-to-make-use-of-the-new-compiler-","dir":"Articles","previous_headings":"","what":"2. Configure the R environment to make use of the new compiler.","title":"Ngme2 Configuration in OS X","text":"Next want use OpenMP R code (maybe exported R function using Rcpp package), make sure R call new compiler, original one. , can mannually set Makeconf file (makefile configuration R) $R_HOME/etc/Makeconf. can check R_HOME address using R.home() R termnial. case, R called compiler still default clang, explicitly replace . Replace configuration lines following (llvm clang installed): Now able export OpenMP function R using Rcpp.","code":"R.home() ## [1] \"/Library/Frameworks/R.framework/Resources\" CC = /usr/local/opt/llvm/bin/clang CXX = /usr/local/opt/llvm/bin/clang++ CXX11 = $(CXX) CXX14 = $(CXX) CXX17 = $(CXX) CXX20 = $(CXX)"},{"path":"https://davidbolin.github.io/ngme2/articles/config_OSX.html","id":"configure-the-r-package-environment-","dir":"Articles","previous_headings":"","what":"3. Configure the R package environment.","title":"Ngme2 Configuration in OS X","text":"developing R package using Rcpp, still need make efforts R package environment. Set OpenMP flags R Makeconf directly setting -fopenmp flag Makevar file, portable system OpenMP support. ’s better include R Makeconf file. can find following two flags Makeconf file. Set package flags package Makevar Next can include flag Makevar following: Set symbols package Namespace One important thing next indicate useDynLib(yourPackage) Namespace. can either , using devtools package . Edit NAMESPACE file create R objects registered symbols: add #' @useDynLib yourPackage, .registration = TRUE yourPackage.R file, run able see update NAMESPACE file. Now can OpenMP facility C++ code!","code":"SHLIB_OPENMP_CFLAGS = -fopenmp SHLIB_OPENMP_CXXFLAGS = -fopenmp PKG_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS) PKG_LIBS = $(SHLIB_OPENMP_CXXFLAGS) useDynLib(yourPackage, .registration = TRUE) devtools::document()"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"vignette provide brief introduction ngme2 package. ngme2 updated version ngme (https://github.com/davidbolin/ngme), package estimating latent non-Gaussian models. follows 3-layer structure design (general block model, latent process models, noises) specifying whole statistical model. latent process defines different operator structure, block model collects together fixed effects measurement noise.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"features","dir":"Articles","previous_headings":"Introduction","what":"1 Features","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"Support spatial models like Matern model non-Gaussian noise. Support models temporal data like AR1 random walk order 1 2. Support replicates locations. Support prediction unknown locations. Comparing previous version, now supports multiple stochastic processes latent model.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"model-framework","dir":"Articles","previous_headings":"Introduction","what":"2 Model Framework","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"package ngme2 provides methods mixed effect models single response variable case multivariate response case (yet). 1.single response case, following form: \\[ \\begin{aligned} Y = {\\bf X}^{\\top} {\\bf \\beta} + \\sum_j {\\bf }_j W_j({\\bf t}) + \\epsilon. \\end{aligned} \\] , \\(Y\\) response variable, \\({\\bf X}\\) matrix fixed effects explanatory variables, \\({\\bf \\beta}\\) matrix fixed effects coefficients, \\({\\bf }_j\\) observation matrix process, \\(W_j(t_j)\\) specified stochastic process, \\(\\epsilon\\) measurement error. , process \\(W\\) follows \\({\\bf K} W = z\\), \\(z\\) either Gaussian non-Gaussian noise. \\({\\bf K}\\) operator matrix. simple template using core function ngme model single response: , function f modeling stochastic process W Gaussian non-Gaussian noise, discuss later. noise stands measurement noise distribution. case, model Gaussian likelihood. multivariate response case, following form: another template using core function ngme model bivariate response:","code":"ngme(   formula=Y ~ x1 + x2 + f(index, model=\"ar\", noise=\"nig\"),   data=data.frame(Y=Y, x1=x1, x2=x2, index=index),   noise = noise_normal() ) ngme(   formula=Y1 | Y2 ~ x1 + x2 + f(index, model=\"ar\", noise=\"nig\") | f(time, model=\"matern\"),   data=data.frame(Y=Y, x1=x1, x2=x2, index=index, time=time),   family=\"normal\" )"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"non-gaussian-model","dir":"Articles","previous_headings":"Introduction","what":"3 Non-Gaussian Model","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"assume non-Gaussian process type-G Lévy process, whose increments can represented location-scale mixtures: \\[\\gamma + \\mu V + \\sigma \\sqrt{V}Z,\\] \\(\\gamma, \\mu, \\sigma\\) parameters, \\(Z\\sim N(0,1)\\) independent \\(V\\), \\(V\\) positive infinitely divisible random variable. results following form, \\(K\\) operator part: \\[ KW|V \\sim N(\\gamma + \\mu V, \\sigma^2 \\, diag(V)), \\] also, \\(\\mu\\) \\(\\sigma\\) can non-stationary. Ngme2, focus mainly normal inverse Gaussian (NIG) model.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"the-nig-model","dir":"Articles","previous_headings":"Introduction > 3 Non-Gaussian Model","what":"The NIG model","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"First, say random variable \\(V\\) follows inverse Gaussian distribution parameters \\(\\eta_1\\) \\(\\eta_2\\), denoted \\(V\\sim IG(\\eta_1,\\eta_2)\\) pdf given \\[\\pi(v) = \\frac{\\sqrt{\\eta_2}}{\\sqrt{2\\pi v^3}} \\exp\\left\\{-\\frac{\\eta_1}{2}v - \\frac{\\eta_2}{2v} + \\sqrt{\\eta_1\\eta_2}\\right\\},\\quad \\eta_1,\\eta_2>0.\\] can generate samples inverse Gaussian distributions parameters \\(\\eta_1\\) \\(\\eta_2\\) generating samples generalized inverse Gaussian distribution parameters \\(p=-1/2\\), \\(=\\eta_1\\) \\(b=\\eta_2\\). can use rGIG function generate samples generalized inverse Gaussian distribution. \\(V\\sim IG(\\eta_1,\\eta_2)\\), \\(X = \\gamma +\\mu V + \\sigma \\sqrt{V}Z\\), \\(Z\\sim N(0,1)\\), independent \\(V\\), \\(X\\) follows normal inverse Gaussian (NIG) distribution pdf \\[\\pi(x) = \\frac{e^{\\sqrt{\\eta_1\\eta_2}+\\mu(x-\\gamma)/\\sigma^2}\\sqrt{\\eta_2\\mu^2/\\sigma^2+\\eta_1\\eta_2}}{\\pi\\sqrt{\\eta_2\\sigma^2+(x-\\gamma)^2}} K_1\\left(\\sqrt{(\\eta_2\\sigma^2+(x-\\gamma)^2)(\\mu^2/\\sigma^4+\\eta_1/\\sigma^2)}\\right),\\] \\(K_1\\) modified Bessel function third kind. form, NIG density overparameterized, therefore set \\(\\eta_1=\\eta_2=\\eta\\), results \\(E(V)=1\\). Thus, one parameters, \\(\\mu, \\gamma\\) \\(\\eta\\). NIG model thus assumes stochastic variance \\(V_i\\) follows inverse Gaussian parameters \\(\\eta\\) \\(\\eta h_i^2\\), \\(h_i = \\int_{\\mathcal{D}} \\varphi_i(\\mathbf{s}) d\\mathbf{s}.\\) , see plot densities NIG distribution several choices parameters (fix \\(\\gamma=0\\) \\(\\eta=1\\)):","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"parameter-estimation","dir":"Articles","previous_headings":"Introduction","what":"4 Parameter Estimation","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"Ngme2 maximum likelihood estimation preconditioned stochastic gradient descent. Multiple chains run parallel better convergence checks.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"specify-noise-with-ngme_noise-object","dir":"Articles","previous_headings":"Ngme Model Structure - 3-Layer structure","what":"Specify noise with ngme_noise object","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"ngme_noise object fundamental structure ngme2. object used specify driving noise stochastic process measurement noise. now support two noises, one normal noise, NIG noise. R class ngme_noise following interface: 3rd example non-stationary NIG noise, \\(\\mu = \\bf B_{\\mu} \\bf \\theta_{\\mu}\\), \\(\\sigma = \\exp(\\bf B_{\\sigma} \\bf \\theta_{\\sigma})\\). construct following noise structure: \\[   - \\mathbf{\\mu} + \\mathbf{\\mu} V + \\mathbf{\\sigma} \\sqrt{V} Z \\] \\(\\mu = \\bf B_{\\mu} \\bf \\theta_{\\mu}\\), \\(\\sigma = \\exp(\\bf B_{\\sigma} \\bf \\theta_{\\sigma})\\). case, can recover gaussian noise setting type=“normal ignoring theta_mu theta_V. can simply use helper function noise_normal(sd=1)","code":"library(ngme2)  noise_normal(sd = 1)                 # normal noise #> Noise type - normal #> Noise parameters:  #>     sigma = 1 noise_nig(mu = 1, sigma = 2, nu = 1) # nig noise #> Noise type - nig #> Noise parameters:  #>     mu = 1 #>     sigma = 2 #>     nu = 1 noise_nig(            # non-stationary nig noise   B_mu=matrix(c(1:10), ncol=2),   theta_mu = c(1, 2),   B_sigma=matrix(c(1:10), ncol=2),   theta_sigma = c(1,2),   nu = 1) #> Noise type - nig #> Noise parameters:  #>     theta_mu = 1, 2 #>     theta_sigma = 1, 2 #>     nu = 1 ngme_noise(   type,           # the type of noise   theta_mu,       # mu parameter   theta_sigma,    # sigma parameter   theta_V,        # nu parameter   B_mu,           # basis matrix for non-stationary mu   B_sigma         # basis matrix for non-stationary sigma )"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"specify-stochastic-process-with-f-function","dir":"Articles","previous_headings":"Ngme Model Structure - 3-Layer structure","what":"Specify stochastic process with f function","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"middle layer stochastic process, R interface, represented f function. process can specified different noise structure. examples using f function specify ngme_model:","code":"f(index = 1:10, model = \"ar1\",   noise = noise_nig(), theta_K = 0.5) #> as(<dgTMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"CsparseMatrix\") instead #> Ngme model: ar1 #> Model parameters:  #>     alpha = 0.5 #>  #> Noise type - nig #> Noise parameters:  #>     mu = 0 #>     sigma = 1 #>     nu = 1"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"specify-latent-model-with-formula-in-ngme","dir":"Articles","previous_headings":"Ngme Model Structure - 3-Layer structure","what":"Specify latent model with formula in ngme","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"latent model can specified additively formula argument ngme function together fixed effects. can specified following: gives ngme object, three parts: Fixed effects (intercept x1) Measurement noise (normal noise) Latent models (contains 2 models, ar1 rw1) can turn estimation = TRUE start estimating model.","code":"ngme(   formula = Y ~ x1 + f(     index = x2,     model = \"ar1\",     noise = noise_nig(),     theta_K = 0.5   ) + f(     model = model_rw(1:5, order=1, circular = TRUE),     noise = noise_normal(),   ),   family = noise_normal(sd = 0.5),   data = data.frame(Y = 1:5, x1 = 2:6, x2 = 3:7),   control = ngme_control(     estimation = FALSE   ) ) #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = -1,  1 #>  #> Measurement noise:  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 0.5 #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: ar1 #>   Model parameters:  #>       alpha = 0.5 #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = 0 #>       sigma = 1 #>       nu = 1 #> [[2]] #>   Ngme model: rw1 #>   Model parameters:  #>       No parameter needed. #>  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 1"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"the-spde-approach-with-gaussian-noise","dir":"Articles","previous_headings":"","what":"The SPDE approach with Gaussian noise","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"well-known (Whittle, 1963) Gaussian process \\(u(\\mathbf{s})\\) Matérn covariance function solves stochastic partial differential equation (SPDE) \\[\\begin{equation}\\label{spde} (\\kappa^2 -\\Delta)^\\beta u = \\mathcal{W}\\quad \\hbox{} \\mathcal{D}, \\end{equation}\\] \\(\\Delta = \\sum_{=1}^d \\frac{\\partial^2}{\\partial_{x_i^2}}\\) Laplacian operator, \\(\\mathcal{W}\\) Gaussian spatial white noise \\(\\mathcal{D}=\\mathbb{R}^d\\), \\(4\\beta = 2\\nu + d\\). Inspired relation Gaussian processes Matérn covariance functions solutions SPDE, Lindgren et al. (2011) constructed computationally efficient Gaussian Markov random field approximations \\(u(\\mathbf{s})\\), domain \\(\\mathcal{D}\\subsetneq \\mathbb{R}^d\\) bounded \\(2\\beta\\\\mathbb{N}\\). motivation handling non-Gaussian noise comes fact many features handled Gaussian noise. reasons : Skewness; Heavier tails; Jumps sample paths; Asymmetries sample paths.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"non-gaussian-matérn-fields","dir":"Articles","previous_headings":"The SPDE approach with Gaussian noise","what":"Non-Gaussian Matérn fields","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"idea replace Gaussian white noise \\(\\mathcal{W}\\) SPDE non-Gaussian white noise \\(\\dot{\\mathcal{M}}\\): \\[(\\kappa^2 - \\Delta)^\\beta u = \\dot{\\mathcal{M}}.\\] solution \\(u\\) Matérn covariance function, marginal distributions non-Gaussian. want apply idea non-Gaussian case, .e., want consider SPDE bounded domain \\(\\mathcal{D}\\subset\\mathbb{R}^d\\) apply finite element method. Notice left-hand side equation change. Therefore, take care right-hand side. consider setup. precisely, consider \\(V_n = {\\rm span}\\{\\varphi_1,\\ldots,\\varphi_n\\}\\), \\(\\varphi_i(\\mathbf{s}), =1,\\ldots, n\\) piecewise linear basis functions obtained triangulation \\(\\mathcal{D}\\) approximate solution \\(u\\) \\(u_n\\), \\(u_n\\) written terms basis functions \\[u_n(\\mathbf{s}) = \\sum_{=1}^n w_i \\varphi_i(\\mathbf{s}).\\] right-hand side obtain random vector \\[\\mathbf{f} = (\\dot{\\mathcal{M}}(\\varphi_1),\\ldots, \\dot{\\mathcal{M}}(\\varphi_n)),\\] functional \\(\\dot{\\mathcal{M}}\\) given \\[\\dot{\\mathcal{M}}(\\varphi_j) = \\int_{\\mathcal{D}} \\varphi_j(\\mathbf{s}) d\\mathcal{M}(\\mathbf{s}).\\] considering \\(\\mathcal{M}\\) type-G Lévy process, obtain \\(\\mathbf{f}\\) joint distribution easy handle. say Lévy process type G increments can represented location-scale mixtures: \\[\\gamma + \\mu V + \\sigma \\sqrt{V}Z,\\] \\(\\gamma, \\mu\\) parameters, \\(Z\\sim N(0,1)\\) independent \\(V\\), \\(V\\) positive infinitely divisible random variable. Therefore, given vector \\(\\mathbf{V} = (V_1,\\ldots,V_n)\\) independent stochastic variances (case, positive infinitely divisible random variables), obtain \\[\\mathbf{f}|\\mathbf{V} \\sim N(\\gamma + \\mu\\mathbf{V}, \\sigma^2{\\rm diag}(\\mathbf{V})).\\] , consider, instance, non-fractional non-Gaussian SPDE \\[(\\kappa^2 - \\Delta) u = \\dot{\\mathcal{M}},\\] obtain FEM weights \\(\\mathbf{w} = (w_1,\\ldots,w_n)\\) satisfy \\[\\mathbf{w}|\\mathbf{V} \\sim N(\\mathbf{K}^{-1}(\\gamma+\\mu\\mathbf{V}), \\sigma^2\\mathbf{K}^{-1}{\\rm diag}(\\mathbf{V})\\mathbf{K}^{-1}),\\] \\(\\mathbf{K} = \\kappa^2\\mathbf{C}+\\mathbf{G}\\) discretization differential operator.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"computational-advantages-of-the-spde-approach","dir":"Articles","previous_headings":"The SPDE approach with Gaussian noise","what":"Computational advantages of the SPDE approach","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"spatial problems, computational cost usually scales \\(\\mathcal{O}(n^{3/2})\\), \\(n\\) number basis functions. compared \\(\\mathcal{O}(N^3)\\) Gaussian random field approach. implies accurate approximations drastically reduces computational cost sampling inference.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"a-simple-example---ar1-process-with-nig-noise","dir":"Articles","previous_headings":"","what":"A simple example - AR1 process with nig noise","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"Now let’s see example AR1 process nig noise. process defined \\[ W_i = \\alpha W_{-1} + \\epsilon_i, \\] , \\(\\epsilon_1, ..,\\epsilon_n\\) iid NIG noise. , easy verify \\[ K{\\bf W} = \\boldsymbol\\epsilon,\\] \\[ K =   \\begin{bmatrix}     \\alpha \\\\     -1 &  \\alpha \\\\     & \\ddots & \\ddots \\\\     & & -1 &  \\alpha   \\end{bmatrix} \\] Now let’s fit model using ngme. can use ngme_control modify control variables ngme. See ?ngme_control optioins. Next can read result directly object. can see, model converges 350 iterations. estimation results close real parameter. can also use traceplot function see estimation traceplot. Parameters AR1 model can also density comparison estimated noise true NIG noise:","code":"n_obs <- 500 sigma_eps <- 0.5 alpha <- 0.5 mu = 2; delta = -mu sigma <- 3 nu <- 1  # First we generate V. V_i follows inverse Gaussian distribution trueV <- ngme2::rig(n_obs, nu, nu, seed = 10)  # Then generate the nig noise noise <- delta + mu*trueV + sigma * sqrt(trueV) * rnorm(n_obs) trueW <- Reduce(function(x,y){y + alpha*x}, noise, accumulate = T) Y = trueW + rnorm(n_obs, mean=0, sd=sigma_eps)  # Add some fixed effects x1 = runif(n_obs) x2 = rexp(n_obs) beta <- c(-3, -1, 2) X <- (model.matrix(Y ~ x1 + x2))  # design matrix Y = as.numeric(Y + X %*% beta) # # Fit the model with the AR1 model ngme_out <- ngme(   Y ~ x1 + x2 + f(     1:n_obs,     model = \"ar1\",     noise = noise_nig(),     theta_K = 0.9  # starting point for the alpha (parameter of K)   ),   data=data.frame(x1=x1, x2=x2, Y=Y),   control = ngme_control(     burnin = 100,     iterations = 1000,     std_lim = 0.4,     gibbs_sample = 5,     n_parallel_chain = 4,     stop_points = 10,     print_check_info = FALSE   ),   seed = 3 ) #> Starting estimation...  #> Estimation done! ngme_out #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = -2.91, -1.44,  1.99 #>  #> Measurement noise:  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 0.788 #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: ar1 #>   Model parameters:  #>       alpha = 0.564 #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = 1.86 #>       sigma = 2.82 #>       nu = 0.831 library(ggplot2) library(grid) library(gridExtra) pl <- lapply(c(\"alpha\", \"mu\", \"sigma\", \"nu\"), function(.x)   traceplot(ngme_out, parameter = .x, f_index = 1)); marrangeGrob(pl, nrow=2, ncol=2) plot(   ngme_out$latents[[1]]$noise,   noise_nig(mu = mu, sigma = sigma, nu = nu) )"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"parana-dataset","dir":"Articles","previous_headings":"","what":"Parana dataset","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"rainfall data Paraná (Brazil) collected National Water Agency Brazil (Agencia Nacional de Águas, ANA, Portuguese). ANA collects data many locations Brazil, data freely available ANA website (http://www3.ana.gov.br/portal/ANA). briefly illustrate command use, result estimation. Plot data: Mean rainfall Octobor 2012 Paraná  Model estimation: Estimations model Result optimization trajectory parameters Matern model: Traceplot Matern parameters","code":"library(INLA) #> Loading required package: Matrix #> Loading required package: foreach #> Loading required package: parallel #> Loading required package: sp #> This is INLA_22.11.08 built 2022-11-08 17:53:54 UTC. #>  - See www.r-inla.org/contact-us for how to get help. #>  - To enable PARDISO sparse library; see inla.pardiso() #>  #> Attaching package: 'INLA' #> The following object is masked from 'package:ngme2': #>  #>     f library(splancs) #>  #> Spatial Point Pattern Analysis Code in S-Plus #>   #>  Version 2 - Spatial and Space-Time analysis library(lattice) data(PRprec) data(PRborder)  # Create INLA mesh coords <- as.matrix(PRprec[, 1:2]) prdomain <- inla.nonconvex.hull(coords, -0.03, -0.05, resolution = c(100, 100)) prmesh <- inla.mesh.2d(boundary = prdomain, max.edge = c(0.45, 1), cutoff = 0.2)  # monthly mean at each location Y <- rowMeans(PRprec[, 12 + 1:31]) # 2 + Octobor  ind <- !is.na(Y) # non-NA index Y <- Y_mean <- Y[ind] coords <- as.matrix(PRprec[ind, 1:2]) seaDist <- apply(spDists(coords, PRborder[1034:1078, ],   longlat = TRUE ), 1, min) # leave 0.1 Y as prediction area n <- length(Y) ind_pred <- sample(1:n, size = 0.1 * n)  Y_pred <- Y[ind_pred] Y[ind_pred] <- NA  A       <- inla.spde.make.A(mesh = prmesh, loc = coords[-ind_pred, ]) A_pred  <- inla.spde.make.A(mesh = prmesh, loc = coords[ind_pred, ])  mesh.index <- inla.spde.make.index(   name = \"field\",   mesh = prmesh,   n.spde = prmesh$n )  matern_spde <- model_matern(   loc = coords,   mesh = prmesh,   index_NA = is.na(Y) )  out <- ngme(   formula = Y ~ 1 +     # f(inla.group(seaDist), model = \"rw1\", noise=noise_normal()) +     f(model = matern_spde, noise = noise_nig()) +     f(model = matern_spde, noise = noise_normal()),   data = list(     Y = Y   ),   family = noise_nig(),   control = ngme_control(     estimation = T,     iterations = 20,     n_slope_check = 4,     stop_points = 10,     std_lim = 0.1,     n_parallel_chain = 8,     print_check_info = FALSE   ),   seed = 416 ) #> Starting estimation...  #> Estimation done!  out #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = 9.56 #>  #> Measurement noise:  #>   Noise type - nig #>   Noise parameters:  #>       mu = 0.496 #>       sigma = 2.27 #>       nu = 1.54 #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: matern #>   Model parameters:  #>       kappa = 0.948 #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = 0.31 #>       sigma = 2.45 #>       nu = 0.727 #> [[2]] #>   Ngme model: matern #>   Model parameters:  #>       kappa = 0.965 #>  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 1.75 # Comparing our prediction lp <- attr(out, \"prediction\")$lp mean(abs(lp - Y_mean))  #MAE #> [1] 1.69781 ggplot() + geom_point(aes(   x = coords[, 1], y = coords[, 2],   colour =  Y_mean - lp ), size = 2, alpha = 1) + scale_color_gradientn(colours = tim.colors(100)) + geom_path(aes(x = PRborder[, 1], y = PRborder[, 2])) + geom_path(aes(x = PRborder[1034:1078, 1], y = PRborder[   1034:1078,   2 ]), colour = \"red\")"},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Bolin. Maintainer.","code":""},{"path":"https://davidbolin.github.io/ngme2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c), person)) (2022). ngme2: Latent Mixed Effects Models Flexible Distributions. R package version 0.1.0, https://davidbolin.github.io/ngme2/.","code":"@Manual{,   title = {ngme2: Latent Mixed Effects Models With Flexible Distributions},   author = {{c)} and {person))}},   year = {2022},   note = {R package version 0.1.0},   url = {https://davidbolin.github.io/ngme2/}, }"},{"path":"https://davidbolin.github.io/ngme2/index.html","id":"ngme","dir":"","previous_headings":"","what":"Latent Mixed Effects Models With Flexible Distributions","title":"Latent Mixed Effects Models With Flexible Distributions","text":"development version can installed using command","code":"remotes::install_github(\"davidbolin/ngme2\", ref = \"devel\")"},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":null,"dir":"Reference","previous_headings":"","what":"Specifying a latent process model (wrapper function for each model) — f","title":"Specifying a latent process model (wrapper function for each model) — f","text":"Function used defining smooth spatial terms within ngme model formulae. function wrapper function specific submodels. (see ngme_models_types() available models).","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specifying a latent process model (wrapper function for each model) — f","text":"","code":"f(   index = NULL,   model = \"ar1\",   replicates = NULL,   noise = noise_normal(),   control = ngme_control_f(),   data = NULL,   A = NULL,   A_pred = NULL,   theta_K = NULL,   W = NULL,   fix_W = NULL,   fix_theta_K = NULL,   index_pred = NULL,   debug = NULL,   index_NA = NULL,   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specifying a latent process model (wrapper function for each model) — f","text":"index symbol numerical value: index covariates build index model 1. string: type model, 2. ngme.spde object replicates Representing replicates noise 1. string: type model, 2. ngme.noise object (can also specified ngme model) control control variables f model data specifed inherit ngme formula Matrix connecting observation mesh A_pred Matrix connecting NA location mesh theta_K Unbounded parameter K W starting value process debug Debug mode index_NA Logical vector, .na(response var.) ... additional arguments inherit data ngme function","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specifying a latent process model (wrapper function for each model) — f","text":"list latent_in constructing latent model, e.g. , h, C, G, also 1. Information K matrix 2. Information noise 3. Control variables","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"Density, distribution function, quantile function random generation generalised inverse-Gaussian distribution  parameters p, b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"","code":"dgig(x, p, a, b, log = FALSE)  rgig(n, p, a, b, seed = 0)  pgig(q, p, a, b, lower.tail = TRUE, log.p = FALSE)  qgig(prob, p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"x, q vector quantiles. p parameter p. , b parameters b. Must positive. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. seed Seed random generation. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). prob vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"dgig gives density, pgig gives distribution function, qgig gives quantile function, rgig generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rgig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"generalised inverse-Gaussian distribution density given  $$f(x; p, , b) = ((/b)^{p/2})/(2K_p(\\sqrt{ab})) x^{p-1} \\exp\\{-(/2)x - (b/2)/x\\},$$  \\(K_p\\) modified Bessel function second kind order \\(p\\),  \\(x>0\\), \\(,b>0\\) \\(p\\\\mathbb{R}\\).  See Jørgensen (1982) details.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"Jørgensen, Bent (1982). Statistical Properties Generalized Inverse Gaussian Distribution. Lecture Notes Statistics. 9. New York–Berlin: Springer-Verlag. doi:10.1007/978-1-4612-5698-4","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"","code":"rgig(100, p = 1, a = 1, b = 1) #>   [1]  9.3008844  4.2321886  3.6902595  2.7684464  3.9520115  3.6603613 #>   [7]  0.4703832  1.3476231  0.8163658  2.6890971  1.3616654  2.1739892 #>  [13]  1.0002598  0.6640540  4.2500952  1.2234124  0.9458393  1.8254432 #>  [19]  5.3289855  0.6029464  2.0807630  3.5058855  5.8270985  5.0368667 #>  [25]  5.4297760  1.9427720  1.7055964  2.4179895  0.7799429  4.0756973 #>  [31]  0.5453227  0.8796771  6.8845256  2.3567733  0.9487358  0.4377837 #>  [37]  1.4095470  3.5594137  1.0256736  3.1802697  3.3096434  0.5422014 #>  [43]  0.3311635  0.7099382  2.6940020  7.7488290  4.0223167  8.3805237 #>  [49]  2.6941142  6.3574361  3.1693171  0.1818951  1.7988159  5.2877860 #>  [55]  5.1634780  1.0052732  1.8129462  2.4329589  4.2244952  2.2274580 #>  [61]  2.5399639  6.0332137  5.0723196  2.1172149  1.0623812  2.7503504 #>  [67]  2.9657280 11.7276522  3.9219754  6.2797983  2.2376467  0.5587686 #>  [73]  5.1002222  1.6440841  3.9345206  2.7257303  1.1220323  2.6923038 #>  [79]  4.2151771  1.4076710  0.4383731  6.0880889  2.2209374  8.8942322 #>  [85]  0.3810166  1.6090617  3.0217092  1.1630713  3.5488489  1.6158042 #>  [91]  1.1437687  1.8631110  5.2591949  0.9187980  1.0583058  2.8294826 #>  [97]  1.3075814  9.2397382  3.5620255  2.7174439 pgig(0.4, p = 1, a = 1, b = 1) #> [1] 0.02956016 qgig(0.8, p = 1, a = 1, b = 1) #> [1] 4.055929 plot(function(x){dgig(x, p = 1, a = 1, b = 1)}, main = \"Generalised inverse-Gaussian density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse-Gaussian (IG) Distribution — ig","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"Density, distribution function, quantile function random generation inverse-Gaussian distribution  parameters b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"","code":"dig(x, a, b, log = FALSE)  rig(n, a, b, seed = 0)  pig(q, a, b, lower.tail = TRUE, log.p = FALSE)  qig(p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"x, q vector quantiles. , b parameters b. Must positive. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. seed Seed random generation. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). p vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"dig gives density, pig gives distribution function, qig gives quantile function, rig generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"inverse-Gaussian distribution density given  $$f(x; , b) = \\frac{\\sqrt{b}}{\\sqrt{2\\pi x^3}}\\exp(  -\\frac{}{2}x -\\frac{b}{2x} + \\sqrt{ab}),$$  \\(x>0\\) \\(,b>0\\). parameterization,  \\(E(X) = \\sqrt{b}/\\sqrt{}\\). See Tweedie (1957a, 1957b)  details.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"Tweedie, M. C. K. (1957a). \"Statistical Properties Inverse Gaussian Distributions \". Annals Mathematical Statistics. 28 (2): 362–377. doi:10.1214/aoms/1177706964 Tweedie, M. C. K. (1957b). \"Statistical Properties Inverse Gaussian Distributions II\". Annals Mathematical Statistics. 28 (3): 696–705. doi:10.1214/aoms/1177706881","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"","code":"rig(100, a = 1, b = 1) #>   [1] 1.3389226 1.0289794 0.2811791 0.8498322 1.5618925 3.3455591 3.5048183 #>   [8] 1.7498832 1.1992589 0.2496115 0.2357410 0.1160907 0.5516324 0.4911807 #>  [15] 1.1274381 0.5661848 1.4732686 1.0376998 0.8744936 0.6756522 0.6851099 #>  [22] 0.6712262 0.1205456 0.5109328 0.3488632 1.8645859 1.2096014 1.7505296 #>  [29] 0.7173548 0.1998706 1.1200226 1.1144219 0.6959671 2.1476357 1.6412800 #>  [36] 0.4640290 0.8469404 0.2679959 0.4403023 1.0415168 0.4964579 0.2350498 #>  [43] 1.5667551 0.7488940 3.6902779 3.0915249 0.2756199 0.5082079 0.3654487 #>  [50] 2.9165914 0.6987115 0.6853757 1.6688472 0.2623485 0.9611037 1.0701438 #>  [57] 0.6823091 0.9254497 0.3899906 1.3938658 0.3253605 0.7413995 0.3101698 #>  [64] 1.2914211 0.3847801 0.5125652 0.9096220 0.8815080 0.2656569 0.3524132 #>  [71] 0.7828638 0.5296188 0.6924493 0.1504196 0.4812060 0.5187943 0.3277534 #>  [78] 0.1608792 0.6919887 1.6681404 2.9316438 2.6860740 4.0211801 1.8406661 #>  [85] 0.3531352 0.3850898 0.8793913 0.2956456 1.5751794 1.2944348 0.1348382 #>  [92] 1.9814361 2.0186621 0.5224298 0.7798748 0.3429183 0.7206789 0.7326259 #>  [99] 0.7347979 0.5133898 pig(0.4, a = 1, b = 1) #> [1] 0.2706137 qig(0.8, a = 1, b = 1) #> [1] 1.447891 plot(function(x){dig(x, a = 1, b = 1)}, main = \"Inverse-Gaussian density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse-Gamma (IGam) Distribution — igam","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"Density, distribution function, quantile function random generation inverse-Gamma distribution  parameters b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"","code":"digam(x, a, b, log = FALSE)  rigam(n, a, b)  pigam(q, a, b, lower.tail = TRUE, log.p = FALSE)  qigam(p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"x, q vector quantiles. , b parameters b. Must positive. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). p vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"digam gives density, pigam gives distribution function, qigam gives quantile function, rigam generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"inverse-Gamma distribution density given  $$f(x; , b) = \\frac{b^}{\\Gamma()}x^{-1}\\exp(  -\\frac{b}{x}),$$  \\(x>0\\) \\(,b>0\\).","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"","code":"rigam(100, a = 1, b = 1) #>   [1]  3.2559185  1.1107924  0.9743887  0.6447039  0.4909087  4.6492839 #>   [7]  2.8032595  0.6276243  0.5204319  0.7742588  0.9241241  0.9150107 #>  [13]  0.3776575  0.4746824  1.8489053  0.3936061  4.2961177  1.0690115 #>  [19]  6.9247353  2.3021666  2.5520964  6.2431266  1.7519373  0.4570078 #>  [25]  1.5328675  0.6831873  0.6862619  0.3555685  1.8192989  1.5053917 #>  [31]  0.7365833  0.3182076  0.8378305  0.6516645  1.1654682  2.2214284 #>  [37]  2.6666383 10.3876411  0.6590875  0.5301803  0.1823661  0.8504268 #>  [43] 48.4025010  4.6920963  4.3771434  0.8216692  0.3209003  9.9826569 #>  [49]  3.0908186  0.8278469 19.5690594  1.1520526  0.4780108  1.5506220 #>  [55]  0.3869968  0.6081173  0.7538157  1.7173959  3.8189402  1.7372364 #>  [61]  5.3142881  8.3825731  1.2648878  1.2792673  0.9967333  2.1697245 #>  [67]  3.6840327  0.3543085  0.5004544  4.5280665  4.7502435  5.9932093 #>  [73]  3.6086692  1.1377505  1.8545530  0.4237871  0.5668201  1.9126348 #>  [79]  0.6992206  1.3164800  2.4276923  0.2657637  1.9065456  2.0324583 #>  [85]  0.3529144  1.7971933 12.3440035  0.4840540  1.8734101  0.6335468 #>  [91]  0.7915667  0.6979076  2.0165201  1.2402223  3.5297521  3.0147258 #>  [97]  0.7224708  1.0135176  1.3520241  0.3743796 pigam(0.4, a = 1, b = 1) #> [1] 0.082085 qigam(0.8, a = 1, b = 1) #> [1] 4.48142 plot(function(x){digam(x, a = 1, b = 1)}, main = \"Inverse-Gamma density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive non-guassian model fitting — ngme","title":"Additive non-guassian model fitting — ngme","text":"ngme function performs analysis non-gaussian additive models.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive non-guassian model fitting — ngme","text":"","code":"ngme(   formula,   data,   control = ngme_control(),   family = \"normal\",   last_fit = NULL,   beta = NULL,   seed = NULL,   start = NULL,   debug = FALSE )"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive non-guassian model fitting — ngme","text":"formula formula data dataframe list providing data (response variable can contain NA value,  NA value columns cause problem) control control variables, see ?ngme.control family likelihood type, measurement noise specification, 1. string 2. ngme noise obejct last_fit can ngme object last fitting beta starting value fixed effects seed set seed pesudo random number generator start starting ngme object (usually object last fitting)","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additive non-guassian model fitting — ngme","text":"list outputs contains estimation operator paramters, noise parameters","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive non-guassian model fitting — ngme","text":"","code":"ngme(  formula = Y ~ x1 + f(    index = x2,    model = \"ar1\",    noise = noise_nig(),    theta_K = 0.5  ) + f(    model = model_rw1(1:5, circular = TRUE),    noise = noise_normal(),  ),  family = noise_normal(sd = 0.5),  data = data.frame(Y = 1:5, x1 = 2:6, x2 = 3:7),  control = ngme_control(    estimation = FALSE  ) ) #> as(<dgTMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"CsparseMatrix\") instead #> Error in model_rw1(1:5, circular = TRUE): could not find function \"model_rw1\""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme2.html","id":null,"dir":"Reference","previous_headings":"","what":"ngme2 — ngme2","title":"ngme2 — ngme2","text":"Inference prediction mixed effects models flexible non-Gaussian Gaussian distributions.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ngme2 — ngme2","text":"David Bolin <davidbolin@gmail.com>","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":null,"dir":"Reference","previous_headings":"","what":"The Normal Inverse-Gaussian (GIG) Distribution — nig","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"Density, distribution function, quantile function random generation normal inverse-Gaussian distribution  parameters p, b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"","code":"dnig(x, delta, mu, nu, sigma, log = FALSE)  rnig(n, delta, mu, nu, sigma, seed = 0)  pnig(q, delta, mu, nu, sigma, lower.tail = TRUE, log.p = FALSE)  qnig(p, delta, mu, nu, sigma, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"x, q vector quantiles. delta numeric value location parameter. mu numeric value shift parameter. nu numeric value shape parameter. sigma numeric value scaling parameter. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. seed Seed random generation. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). p vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"dnig gives density, pnig gives distribution function, qnig gives quantile function, rnig generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rnig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"normal inverse-Gaussian distribution density given  $$f(x; p, , b) =  \\frac{e^{\\nu+\\mu(x-\\delta)/\\sigma^2}\\sqrt{\\nu\\mu^2/\\sigma^2+\\nu^2}}{\\pi\\sqrt{\\nu\\sigma^2+(x-\\delta)^2}}  K_1(\\sqrt{(\\nu\\sigma^2+(x-\\delta)^2)(\\mu^2/\\sigma^4+\\nu/\\sigma^2)}),$$  \\(K_p\\) modified Bessel function second kind order \\(p\\),  \\(x>0\\), \\(\\nu>0\\) \\(\\mu,\\delta, \\sigma\\\\mathbb{R}\\).  See Barndorff-Nielsen (1977, 1978 1997) details.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"Barndorff-Nielsen, O. (1977) Exponentially decreasing distributions logarithm particle size. Proceedings Royal Society London. Series , Mathematical Physical Sciences. Royal Society. 353, 401–409. doi:10.1098/rspa.1977.0041 Barndorff-Nielsen, O. (1978) Hyperbolic Distributions Distributions Hyperbolae, Scandinavian Journal Statistics. 5, 151–157. Barndorff-Nielsen, O. (1997) Normal Inverse Gaussian Distributions Stochastic Volatility Modelling, Scandinavian Journal Statistics. 24, 1-13. doi:10.1111/1467-9469.00045","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"","code":"rnig(100, delta = 0, mu = 5, sigma = 1, nu = 1) #>   [1] 13.81626250  1.95391183 15.92415340  1.91631156  3.09617094  2.61432700 #>   [7]  0.52473376  1.23432892  9.13034566  3.54911714  3.60456534 12.31181312 #>  [13]  3.60502415  1.65619324  1.58707148 10.33535143 15.64120383  1.97809039 #>  [19] 11.37310897  0.93218873  0.94194684  9.22453103  5.20486820  0.39683982 #>  [25]  3.85791805  1.38272159 10.25210783  1.19886480  7.06549973  7.11511827 #>  [31]  3.11091160  3.33229753 18.74140112 12.54797540 10.49455511  1.46726609 #>  [37]  3.41511484  8.30452785  7.67475945  6.15812798  2.57230473  5.38113427 #>  [43]  3.50595871 11.73755916 -0.02485312  1.39353874  2.14475705  3.08957690 #>  [49]  4.96868188  6.46776281  0.77683158  0.83560766  4.23859520  3.49510518 #>  [55] 10.58126125  1.61850698  2.79308838  1.69043603  2.70578619  0.27861430 #>  [61]  1.00723425 19.61451180  1.71113117 11.04951737  5.56037761  0.80475847 #>  [67]  2.57644630  5.74795456  1.05019785  8.16252237  0.97299924  0.46637572 #>  [73]  8.99353441  2.23107683  7.97863195  1.53396407  5.37092227  7.99107305 #>  [79]  1.90533471  6.44372763  4.81511596  1.43767278  2.08673593  2.94822385 #>  [85]  8.78003778  0.48636874  2.96121194  0.41971370  4.98186048  3.43602553 #>  [91]  1.40790779  1.56682530  1.19039305  4.87804057 13.56496003  2.87000477 #>  [97]  5.13560245  2.41037979  7.34487050  2.09118489 pnig(0.4, delta = 0, mu = 5, sigma = 1, nu = 1) #> [1] 0.01597497 qnig(0.8, delta = 0, mu = 5, sigma = 1, nu = 1) #> [1] 7.390234 plot(function(x){dnig(x, delta = 0, mu = 5, sigma = 1, nu = 1)}, main = \"Normal inverse-Gaussian density\", ylab = \"Probability density\", xlim = c(0,10))"}]
