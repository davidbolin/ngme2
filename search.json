[{"path":"https://davidbolin.github.io/ngme2/articles/Installation_and_configuration.html","id":"install-a-openmp-supported-clang-as-default-cc-compiler-","dir":"Articles","previous_headings":"","what":"1. Install a OpenMP supported clang as default C/C++ compiler.","title":"Installation and configuration","text":"’s need install another compiler supports OpenMP. use homebrew installing llvm clang compiler using following scripts. (Check homebrew can just run following command install homebrew.) successful, able see following prompt. make llvm clang default compiler, need update PATH variable, reopen terminal make work: Now able use llvm clang OpenMP support. Let’s test : case, llvm lib include folder already added default clang search path. (can check search path run commands like clang hello.cpp -v, otherwise may need include mannually -L -, can also export system variable suggested, use makefile compile).","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ➜ brew install llvm  ... To use the bundled libc++ please add the following LDFLAGS:   LDFLAGS=\"-L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++\"  llvm is keg-only, which means it was not symlinked into /usr/local, because macOS already provides this software and installing another version in parallel can cause all kinds of trouble.  If you need to have llvm first in your PATH, run:   echo 'export PATH=\"/usr/local/opt/llvm/bin:$PATH\"' >> ~/.zshrc  For compilers to find llvm you may need to set:   export LDFLAGS=\"-L/usr/local/opt/llvm/lib\"   export CPPFLAGS=\"-I/usr/local/opt/llvm/include\" ➜ echo 'export PATH=\"/usr/local/opt/llvm/bin:$PATH\"' >> ~/.zshrc ➜ clang -fopenmp hello.cpp"},{"path":"https://davidbolin.github.io/ngme2/articles/Installation_and_configuration.html","id":"configure-the-r-environment-to-make-use-of-the-new-compiler-","dir":"Articles","previous_headings":"","what":"2. Configure the R environment to make use of the new compiler.","title":"Installation and configuration","text":"Next want use OpenMP R code (maybe exported R function using Rcpp package), make sure R call new compiler, original one. , can mannually set Makeconf file (makefile configuration R) $R_HOME/etc/Makeconf. can check R_HOME address using R.home() R termnial. case, R called compiler still default clang, explicitly replace . Replace configuration lines following (llvm clang installed): Now able export OpenMP function R using Rcpp.","code":"R.home() ## [1] \"/Library/Frameworks/R.framework/Resources\" CC = /usr/local/opt/llvm/bin/clang CXX = /usr/local/opt/llvm/bin/clang++ CXX11 = $(CXX) CXX14 = $(CXX) CXX17 = $(CXX) CXX20 = $(CXX)"},{"path":"https://davidbolin.github.io/ngme2/articles/Installation_and_configuration.html","id":"configure-the-r-package-environment-","dir":"Articles","previous_headings":"","what":"3. Configure the R package environment.","title":"Installation and configuration","text":"developing R package using Rcpp, still need make efforts R package environment. Set OpenMP flags R Makeconf directly setting -fopenmp flag Makevar file, portable system OpenMP support. ’s better include R Makeconf file. can find following two flags Makeconf file. Set package flags package Makevar Next can include flag Makevar following: Set symbols package Namespace One important thing next indicate useDynLib(yourPackage) Namespace. can either , using devtools package . Edit NAMESPACE file create R objects registered symbols: add #' @useDynLib yourPackage, .registration = TRUE yourPackage.R file, run able see update NAMESPACE file. Now can OpenMP facility C++ code!","code":"SHLIB_OPENMP_CFLAGS = -fopenmp SHLIB_OPENMP_CXXFLAGS = -fopenmp PKG_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS) PKG_LIBS = $(SHLIB_OPENMP_CXXFLAGS) useDynLib(yourPackage, .registration = TRUE) devtools::document()"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"vignette provide brief introduction ngme2 package. ngme2 updated version ngme (https://github.com/davidbolin/ngme), package estimating latent non-Gaussian models. follows 3-layer structure design (general block model, latent process models, noises) specifying whole statistical model. latent process defines different operator structure, block model collects together fixed effects measurement noise.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"features","dir":"Articles","previous_headings":"Introduction","what":"1 Features","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"Support spatial models like Matern model non-Gaussian noise. Support models temporal data like AR1 random walk order 1 2. Support replicates locations. Support prediction unknown locations. Comparing previous version, now supports multiple stochastic processes latent model.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"model-framework","dir":"Articles","previous_headings":"Introduction","what":"2 Model Framework","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"package ngme2 provides methods mixed effect models single response variable case multivariate response case (yet). 1.single response case, following form: \\[ \\begin{aligned} Y = {\\bf X}^{\\top} {\\bf \\beta} + \\sum_j {\\bf }_j W_j({\\bf t}) + \\epsilon. \\end{aligned} \\] , \\(Y\\) response variable, \\({\\bf X}\\) matrix fixed effects explanatory variables, \\({\\bf \\beta}\\) matrix fixed effects coefficients, \\({\\bf }_j\\) observation matrix process, \\(W_j(t_j)\\) specified stochastic process, \\(\\epsilon\\) measurement error. , process \\(W\\) follows \\({\\bf K} W = z\\), \\(z\\) either Gaussian non-Gaussian noise. \\({\\bf K}\\) operator matrix. simple template using core function ngme model single response: , function f modeling stochastic process W Gaussian non-Gaussian noise, discuss later. noise stands measurement noise distribution. case, model Gaussian likelihood. multivariate response case, following form: another template using core function ngme model bivariate response:","code":"ngme(   formula=Y ~ x1 + x2 + f(index, model=\"ar\", noise=\"nig\"),   data=data.frame(Y=Y, x1=x1, x2=x2, index=index),   noise = noise_normal() ) ngme(   formula=Y1 | Y2 ~ x1 + x2 + f(index, model=\"ar\", noise=\"nig\") | f(time, model=\"matern\"),   data=data.frame(Y=Y, x1=x1, x2=x2, index=index, time=time),   family=\"normal\" )"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"non-gaussian-model","dir":"Articles","previous_headings":"Introduction","what":"3 Non-Gaussian Model","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"assume non-Gaussian process type-G Lévy process, whose increments can represented location-scale mixtures: \\[\\gamma + \\mu V + \\sigma \\sqrt{V}Z,\\] \\(\\gamma, \\mu, \\sigma\\) parameters, \\(Z\\sim N(0,1)\\) independent \\(V\\), \\(V\\) positive infinitely divisible random variable. results following form, \\(K\\) operator part: \\[ KW|V \\sim N(\\gamma + \\mu V, \\sigma^2 \\, diag(V)), \\] also, \\(\\mu\\) \\(\\sigma\\) can non-stationary. Ngme2, focus mainly normal inverse Gaussian (NIG) model.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"the-nig-model","dir":"Articles","previous_headings":"Introduction > 3 Non-Gaussian Model","what":"The NIG model","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"First, say random variable \\(V\\) follows inverse Gaussian distribution parameters \\(\\eta_1\\) \\(\\eta_2\\), denoted \\(V\\sim IG(\\eta_1,\\eta_2)\\) pdf given \\[\\pi(v) = \\frac{\\sqrt{\\eta_2}}{\\sqrt{2\\pi v^3}} \\exp\\left\\{-\\frac{\\eta_1}{2}v - \\frac{\\eta_2}{2v} + \\sqrt{\\eta_1\\eta_2}\\right\\},\\quad \\eta_1,\\eta_2>0.\\] can generate samples inverse Gaussian distributions parameters \\(\\eta_1\\) \\(\\eta_2\\) generating samples generalized inverse Gaussian distribution parameters \\(p=-1/2\\), \\(=\\eta_1\\) \\(b=\\eta_2\\). can use rGIG function generate samples generalized inverse Gaussian distribution. \\(V\\sim IG(\\eta_1,\\eta_2)\\), \\(X = \\gamma +\\mu V + \\sigma \\sqrt{V}Z\\), \\(Z\\sim N(0,1)\\), independent \\(V\\), \\(X\\) follows normal inverse Gaussian (NIG) distribution pdf \\[\\pi(x) = \\frac{e^{\\sqrt{\\eta_1\\eta_2}+\\mu(x-\\gamma)/\\sigma^2}\\sqrt{\\eta_2\\mu^2/\\sigma^2+\\eta_1\\eta_2}}{\\pi\\sqrt{\\eta_2\\sigma^2+(x-\\gamma)^2}} K_1\\left(\\sqrt{(\\eta_2\\sigma^2+(x-\\gamma)^2)(\\mu^2/\\sigma^4+\\eta_1/\\sigma^2)}\\right),\\] \\(K_1\\) modified Bessel function third kind. form, NIG density overparameterized, therefore set \\(\\eta_1=\\eta_2=\\eta\\), results \\(E(V)=1\\). Thus, one parameters, \\(\\mu, \\gamma\\) \\(\\eta\\). NIG model thus assumes stochastic variance \\(V_i\\) follows inverse Gaussian parameters \\(\\eta\\) \\(\\eta h_i^2\\), \\(h_i = \\int_{\\mathcal{D}} \\varphi_i(\\mathbf{s}) d\\mathbf{s}.\\) , see plot densities NIG distribution several choices parameters (fix \\(\\gamma=0\\) \\(\\eta=1\\)):","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"parameter-estimation","dir":"Articles","previous_headings":"Introduction","what":"4 Parameter Estimation","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"Ngme2 maximum likelihood estimation preconditioned stochastic gradient descent. Multiple chains run parallel better convergence checks.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"specify-noise-with-ngme_noise-object","dir":"Articles","previous_headings":"Ngme Model Structure - 3-Layer structure","what":"Specify noise with ngme_noise object","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"ngme_noise object fundamental structure ngme2. object used specify driving noise stochastic process measurement noise. now support two noises, one normal noise, NIG noise. R class ngme_noise following interface: 3rd example non-stationary NIG noise, \\(\\mu = \\bf B_{\\mu} \\bf \\theta_{\\mu}\\), \\(\\sigma = \\exp(\\bf B_{\\sigma} \\bf \\theta_{\\sigma})\\). construct following noise structure: \\[   - \\mathbf{\\mu} + \\mathbf{\\mu} V + \\mathbf{\\sigma} \\sqrt{V} Z \\] \\(\\mu = \\bf B_{\\mu} \\bf \\theta_{\\mu}\\), \\(\\sigma = \\exp(\\bf B_{\\sigma} \\bf \\theta_{\\sigma})\\). case, can recover gaussian noise setting type=“normal ignoring theta_mu theta_V. can simply use helper function noise_normal(sd=1)","code":"library(ngme2)  noise_normal(sd = 1)                 # normal noise #> Noise type - normal #> Noise parameters:  #>     sigma = 1 noise_nig(mu = 1, sigma = 2, nu = 1) # nig noise #> Noise type - nig #> Noise parameters:  #>     mu = 1 #>     sigma = 2 #>     nu = 1 noise_nig(            # non-stationary nig noise   B_mu=matrix(c(1:10), ncol=2),   theta_mu = c(1, 2),   B_sigma=matrix(c(1:10), ncol=2),   theta_sigma = c(1,2),   nu = 1) #> Noise type - nig #> Noise parameters:  #>     theta_mu = 1, 2 #>     theta_sigma = 1, 2 #>     nu = 1 ngme_noise(   type,           # the type of noise   theta_mu,       # mu parameter   theta_sigma,    # sigma parameter   theta_V,        # nu parameter   B_mu,           # basis matrix for non-stationary mu   B_sigma         # basis matrix for non-stationary sigma )"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"specify-stochastic-process-with-f-function","dir":"Articles","previous_headings":"Ngme Model Structure - 3-Layer structure","what":"Specify stochastic process with f function","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"middle layer stochastic process, R interface, represented f function. process can specified different noise structure. examples using f function specify ngme_model:","code":"f(index = 1:10, model = \"ar1\",   noise = noise_nig(), theta_K = 0.5) #> as(<dgTMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"CsparseMatrix\") instead #> Ngme model: ar1 #> Model parameters:  #>     alpha = 0.5 #>  #> Noise type - nig #> Noise parameters:  #>     mu = 0 #>     sigma = 1 #>     nu = 1"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"specify-latent-model-with-formula-in-ngme","dir":"Articles","previous_headings":"Ngme Model Structure - 3-Layer structure","what":"Specify latent model with formula in ngme","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"latent model can specified additively formula argument ngme function together fixed effects. can specified following: gives ngme object, three parts: Fixed effects (intercept x1) Measurement noise (normal noise) Latent models (contains 2 models, ar1 rw1) can turn estimation = TRUE start estimating model.","code":"ngme(   formula = Y ~ x1 + f(     index = x2,     model = \"ar1\",     noise = noise_nig(),     theta_K = 0.5   ) + f(     model = model_rw(1:5, order=1, circular = TRUE),     noise = noise_normal(),   ),   family = noise_normal(sd = 0.5),   data = data.frame(Y = 1:5, x1 = 2:6, x2 = 3:7),   control = ngme_control(     estimation = FALSE   ) ) #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = -1,  1 #>  #> Measurement noise:  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 0.5 #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: ar1 #>   Model parameters:  #>       alpha = 0.5 #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = 0 #>       sigma = 1 #>       nu = 1 #> [[2]] #>   Ngme model: rw1 #>   Model parameters:  #>       No parameter needed. #>  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 1"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"the-spde-approach-with-gaussian-noise","dir":"Articles","previous_headings":"","what":"The SPDE approach with Gaussian noise","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"well-known (Whittle, 1963) Gaussian process \\(u(\\mathbf{s})\\) Matérn covariance function solves stochastic partial differential equation (SPDE) \\[\\begin{equation}\\label{spde} (\\kappa^2 -\\Delta)^\\beta u = \\mathcal{W}\\quad \\hbox{} \\mathcal{D}, \\end{equation}\\] \\(\\Delta = \\sum_{=1}^d \\frac{\\partial^2}{\\partial_{x_i^2}}\\) Laplacian operator, \\(\\mathcal{W}\\) Gaussian spatial white noise \\(\\mathcal{D}=\\mathbb{R}^d\\), \\(4\\beta = 2\\nu + d\\). Inspired relation Gaussian processes Matérn covariance functions solutions SPDE, Lindgren et al. (2011) constructed computationally efficient Gaussian Markov random field approximations \\(u(\\mathbf{s})\\), domain \\(\\mathcal{D}\\subsetneq \\mathbb{R}^d\\) bounded \\(2\\beta\\\\mathbb{N}\\). motivation handling non-Gaussian noise comes fact many features handled Gaussian noise. reasons : Skewness; Heavier tails; Jumps sample paths; Asymmetries sample paths.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"non-gaussian-matérn-fields","dir":"Articles","previous_headings":"The SPDE approach with Gaussian noise","what":"Non-Gaussian Matérn fields","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"idea replace Gaussian white noise \\(\\mathcal{W}\\) SPDE non-Gaussian white noise \\(\\dot{\\mathcal{M}}\\): \\[(\\kappa^2 - \\Delta)^\\beta u = \\dot{\\mathcal{M}}.\\] solution \\(u\\) Matérn covariance function, marginal distributions non-Gaussian. want apply idea non-Gaussian case, .e., want consider SPDE bounded domain \\(\\mathcal{D}\\subset\\mathbb{R}^d\\) apply finite element method. Notice left-hand side equation change. Therefore, take care right-hand side. consider setup. precisely, consider \\(V_n = {\\rm span}\\{\\varphi_1,\\ldots,\\varphi_n\\}\\), \\(\\varphi_i(\\mathbf{s}), =1,\\ldots, n\\) piecewise linear basis functions obtained triangulation \\(\\mathcal{D}\\) approximate solution \\(u\\) \\(u_n\\), \\(u_n\\) written terms basis functions \\[u_n(\\mathbf{s}) = \\sum_{=1}^n w_i \\varphi_i(\\mathbf{s}).\\] right-hand side obtain random vector \\[\\mathbf{f} = (\\dot{\\mathcal{M}}(\\varphi_1),\\ldots, \\dot{\\mathcal{M}}(\\varphi_n)),\\] functional \\(\\dot{\\mathcal{M}}\\) given \\[\\dot{\\mathcal{M}}(\\varphi_j) = \\int_{\\mathcal{D}} \\varphi_j(\\mathbf{s}) d\\mathcal{M}(\\mathbf{s}).\\] considering \\(\\mathcal{M}\\) type-G Lévy process, obtain \\(\\mathbf{f}\\) joint distribution easy handle. say Lévy process type G increments can represented location-scale mixtures: \\[\\gamma + \\mu V + \\sigma \\sqrt{V}Z,\\] \\(\\gamma, \\mu\\) parameters, \\(Z\\sim N(0,1)\\) independent \\(V\\), \\(V\\) positive infinitely divisible random variable. Therefore, given vector \\(\\mathbf{V} = (V_1,\\ldots,V_n)\\) independent stochastic variances (case, positive infinitely divisible random variables), obtain \\[\\mathbf{f}|\\mathbf{V} \\sim N(\\gamma + \\mu\\mathbf{V}, \\sigma^2{\\rm diag}(\\mathbf{V})).\\] , consider, instance, non-fractional non-Gaussian SPDE \\[(\\kappa^2 - \\Delta) u = \\dot{\\mathcal{M}},\\] obtain FEM weights \\(\\mathbf{w} = (w_1,\\ldots,w_n)\\) satisfy \\[\\mathbf{w}|\\mathbf{V} \\sim N(\\mathbf{K}^{-1}(\\gamma+\\mu\\mathbf{V}), \\sigma^2\\mathbf{K}^{-1}{\\rm diag}(\\mathbf{V})\\mathbf{K}^{-1}),\\] \\(\\mathbf{K} = \\kappa^2\\mathbf{C}+\\mathbf{G}\\) discretization differential operator.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"computational-advantages-of-the-spde-approach","dir":"Articles","previous_headings":"The SPDE approach with Gaussian noise","what":"Computational advantages of the SPDE approach","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"spatial problems, computational cost usually scales \\(\\mathcal{O}(n^{3/2})\\), \\(n\\) number basis functions. compared \\(\\mathcal{O}(N^3)\\) Gaussian random field approach. implies accurate approximations drastically reduces computational cost sampling inference.","code":""},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"a-simple-example---ar1-process-with-nig-noise","dir":"Articles","previous_headings":"","what":"A simple example - AR1 process with nig noise","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"Now let’s see example AR1 process nig noise. process defined \\[ W_i = \\alpha W_{-1} + \\epsilon_i, \\] , \\(\\epsilon_1, ..,\\epsilon_n\\) iid NIG noise. , easy verify \\[ K{\\bf W} = \\boldsymbol\\epsilon,\\] \\[ K =   \\begin{bmatrix}     \\alpha \\\\     -1 &  \\alpha \\\\     & \\ddots & \\ddots \\\\     & & -1 &  \\alpha   \\end{bmatrix} \\] Now let’s fit model using ngme. can use ngme_control modify control variables ngme. See ?ngme_control optioins. Next can read result directly object. can see, model converges 350 iterations. estimation results close real parameter. can also use traceplot function see estimation traceplot. Parameters AR1 model can also density comparison estimated noise true NIG noise:","code":"n_obs <- 500 sigma_eps <- 0.5 alpha <- 0.5 mu = 2; delta = -mu sigma <- 3 nu <- 1  # First we generate V. V_i follows inverse Gaussian distribution trueV <- ngme2::rig(n_obs, nu, nu, seed = 10)  # Then generate the nig noise noise <- delta + mu*trueV + sigma * sqrt(trueV) * rnorm(n_obs) trueW <- Reduce(function(x,y){y + alpha*x}, noise, accumulate = T) Y = trueW + rnorm(n_obs, mean=0, sd=sigma_eps)  # Add some fixed effects x1 = runif(n_obs) x2 = rexp(n_obs) beta <- c(-3, -1, 2) X <- (model.matrix(Y ~ x1 + x2))  # design matrix Y = as.numeric(Y + X %*% beta) # # Fit the model with the AR1 model ngme_out <- ngme(   Y ~ x1 + x2 + f(     1:n_obs,     model = \"ar1\",     noise = noise_nig(),     theta_K = 0.9  # starting point for the alpha (parameter of K)   ),   data=data.frame(x1=x1, x2=x2, Y=Y),   control = ngme_control(     burnin = 100,     iterations = 1000,     std_lim = 0.4,     gibbs_sample = 5,     n_parallel_chain = 4,     stop_points = 10,     print_check_info = FALSE   ),   seed = 3 ) #> Starting estimation...  #> Total time is (ms): 5369 #> Estimation done! ngme_out #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = -2.91, -1.44,  1.99 #>  #> Measurement noise:  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 0.788 #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: ar1 #>   Model parameters:  #>       alpha = 0.564 #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = 1.86 #>       sigma = 2.82 #>       nu = 0.831 library(ggplot2) library(grid) library(gridExtra) pl <- lapply(c(\"alpha\", \"mu\", \"sigma\", \"nu\"), function(.x)   traceplot(ngme_out, parameter = .x, f_index = 1)); marrangeGrob(pl, nrow=2, ncol=2) plot(   ngme_out$latents[[1]]$noise,   noise_nig(mu = mu, sigma = sigma, nu = nu) )"},{"path":"https://davidbolin.github.io/ngme2/articles/ngme2.html","id":"paraná-dataset","dir":"Articles","previous_headings":"","what":"Paraná dataset","title":"Ngme2 - A new Flexible R Package for Latent non-Gaussian Models","text":"rainfall data Paraná (Brazil) collected National Water Agency Brazil (Agencia Nacional de Águas, ANA, Portuguese). ANA collects data many locations Brazil, data freely available ANA website (http://www3.ana.gov.br/portal/ANA). briefly illustrate command use, result estimation. Plot data: Mean rainfall Octobor 2012 Paraná  Model estimation: Estimations model Result optimization trajectory parameters Matern model: Traceplot Matern parameters","code":"library(INLA) #> Loading required package: Matrix #> Loading required package: foreach #> Loading required package: parallel #> Loading required package: sp #> This is INLA_22.11.08 built 2022-11-08 17:53:54 UTC. #>  - See www.r-inla.org/contact-us for how to get help. #>  - To enable PARDISO sparse library; see inla.pardiso() #>  #> Attaching package: 'INLA' #> The following object is masked from 'package:ngme2': #>  #>     f library(splancs) #>  #> Spatial Point Pattern Analysis Code in S-Plus #>   #>  Version 2 - Spatial and Space-Time analysis library(lattice) data(PRprec) data(PRborder)  # Create INLA mesh coords <- as.matrix(PRprec[, 1:2]) prdomain <- inla.nonconvex.hull(coords, -0.03, -0.05, resolution = c(100, 100)) prmesh <- inla.mesh.2d(boundary = prdomain, max.edge = c(0.45, 1), cutoff = 0.2)  # monthly mean at each location Y <- rowMeans(PRprec[, 12 + 1:31]) # 2 + Octobor  ind <- !is.na(Y) # non-NA index Y <- Y_mean <- Y[ind] coords <- as.matrix(PRprec[ind, 1:2]) seaDist <- apply(spDists(coords, PRborder[1034:1078, ],   longlat = TRUE ), 1, min) # leave 0.1 Y as prediction area n <- length(Y) ind_pred <- sample(1:n, size = 0.1 * n)  Y_pred <- Y[ind_pred] Y[ind_pred] <- NA  mesh.index <- inla.spde.make.index(   name = \"field\",   mesh = prmesh,   n.spde = prmesh$n )  matern_spde <- model_matern(   loc = coords,   mesh = prmesh,   index_NA = is.na(Y) )  out <- ngme(   formula = Y ~ 1 +     f(inla.group(seaDist), model = \"rw1\", noise = noise_normal()) +     f(model = matern_spde, noise = noise_nig()) +     f(model = matern_spde, noise = noise_normal()),   data = list(     Y = Y   ),   family = noise_nig(),   control = ngme_control(     estimation = T,     iterations = 1000,     n_slope_check = 4,     stop_points = 10,     std_lim = 0.1,     n_parallel_chain = 8,     print_check_info = TRUE   ),   seed = 416 ) #> Starting estimation...  #> begin Constructor of Matern  #> finish Constructor of Matern  #> begin Constructor of Matern  #> finish Constructor of Matern  #> Total time is (ms): 36421 #> Estimation done!  out #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = 8.75 #>  #> Measurement noise:  #>   Noise type - nig #>   Noise parameters:  #>       mu = NaN #>       sigma = NaN #>       nu = NaN #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: rw1 #>   Model parameters:  #>       No parameter needed. #>  #>   Noise type - normal #>   Noise parameters:  #>       sigma = NaN #> [[2]] #>   Ngme model: matern #>   Model parameters:  #>       kappa = NaN #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = NaN #>       sigma = NaN #>       nu = NaN #> [[3]] #>   Ngme model: matern #>   Model parameters:  #>       kappa = NaN #>  #>   Noise type - normal #>   Noise parameters:  #>       sigma = NaN # Comparing our prediction lp <- attr(out, \"prediction\")$lp # Compute mean absolute error (MAE) mean(abs(lp - Y_mean)) #> [1] NaN ggplot() + geom_point(aes(   x = coords[, 1], y = coords[, 2],   colour =  Y_mean - lp ), size = 2, alpha = 1) + scale_color_gradientn(colours = tim.colors(100)) + geom_path(aes(x = PRborder[, 1], y = PRborder[, 2])) + geom_path(aes(x = PRborder[1034:1078, 1], y = PRborder[   1034:1078,   2 ]), colour = \"red\") #> Warning: Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`). #> Removed 999 rows containing missing values (`geom_line()`)."},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Bolin. Author, maintainer. Xiaotian Jin. Author. Alexandre Simas. Author. Jonas Wallin. Author.","code":""},{"path":"https://davidbolin.github.io/ngme2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bolin D, Jin X, Simas , Wallin J (2022). ngme2: Latent Mixed Effects Models Flexible Distributions. R package version 0.1.0, https://davidbolin.github.io/ngme2/.","code":"@Manual{,   title = {ngme2: Latent Mixed Effects Models With Flexible Distributions},   author = {David Bolin and Xiaotian Jin and Alexandre Simas and Jonas Wallin},   year = {2022},   note = {R package version 0.1.0},   url = {https://davidbolin.github.io/ngme2/}, }"},{"path":"https://davidbolin.github.io/ngme2/index.html","id":"the-ngme2-package","dir":"","previous_headings":"","what":"Latent Mixed Effects Models With Flexible Distributions","title":"Latent Mixed Effects Models With Flexible Distributions","text":"ngme2 R package used fitting non-gaussian mixed effects models. models fitted efficient manner. Basic statistical operations likelihood evaluations kriging predictions also implemented.","code":""},{"path":"https://davidbolin.github.io/ngme2/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Latent Mixed Effects Models With Flexible Distributions","text":"development version can installed using command See also Installation Configuration vignette.","code":"remotes::install_github(\"davidbolin/ngme2\", ref = \"devel\")"},{"path":"https://davidbolin.github.io/ngme2/reference/argo_float.html","id":null,"dir":"Reference","previous_headings":"","what":"Argo float dataset — argo_float","title":"Argo float dataset — argo_float","text":"Argo floats measurements.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/argo_float.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Argo float dataset — argo_float","text":"","code":"data(\"argo_float\")"},{"path":"https://davidbolin.github.io/ngme2/reference/argo_float.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Argo float dataset — argo_float","text":"Data frame containing 274 observations 4 variables. lat Latitude. lon Longitude. sal Salinity. temp Temperature.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/argo_float.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Argo float dataset — argo_float","text":"Data can obtained Argo float website.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/argo_float.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Argo float dataset — argo_float","text":"floats pressure case made aluminium 1.3m long 20cm diameter. weigh 40kg. top antenna communicate satellites fix float's position receive data. Also top temperature, salinity pressure sensors.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/create_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ngme noise with a list — create_noise","title":"Create ngme noise with a list — create_noise","text":"Create ngme noise list","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/create_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ngme noise with a list — create_noise","text":"","code":"create_noise(x)"},{"path":"https://davidbolin.github.io/ngme2/reference/create_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ngme noise with a list — create_noise","text":"x list","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/create_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ngme noise with a list — create_noise","text":"list specification ngme","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":null,"dir":"Reference","previous_headings":"","what":"Specifying a latent process model (wrapper function for each model) — f","title":"Specifying a latent process model (wrapper function for each model) — f","text":"Function used defining smooth spatial terms within ngme model formulae. function wrapper function specific submodels. (see ngme_models_types() available models).","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specifying a latent process model (wrapper function for each model) — f","text":"","code":"f(   index = NULL,   model = \"ar1\",   replicates = NULL,   noise = noise_normal(),   control = ngme_control_f(),   data = NULL,   A = NULL,   A_pred = NULL,   theta_K = NULL,   W = NULL,   fix_W = NULL,   fix_theta_K = NULL,   index_pred = NULL,   debug = NULL,   index_NA = NULL,   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specifying a latent process model (wrapper function for each model) — f","text":"index symbol numerical value: index covariates build index model 1. string: type model, 2. ngme.spde object replicates Representing replicates noise 1. string: type model, 2. ngme.noise object (can also specified ngme model) control control variables f model data specifed inherit ngme formula Matrix connecting observation mesh A_pred Matrix connecting NA location mesh theta_K Unbounded parameter K W starting value process fix_W stop sampling W fix_theta_K fix estimation theta_K. index_pred index prediction debug Debug mode index_NA Logical vector, .na(response var.) ... additional arguments inherit data ngme function","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specifying a latent process model (wrapper function for each model) — f","text":"list latent_in constructing latent model, e.g. , h, C, G, also 1. Information K matrix 2. Information noise 3. Control variables","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"Density, distribution function, quantile function random generation generalised inverse-Gaussian distribution  parameters p, b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"","code":"dgig(x, p, a, b, log = FALSE)  rgig(n, p, a, b, seed = 0)  pgig(q, p, a, b, lower.tail = TRUE, log.p = FALSE)  qgig(prob, p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"x, q vector quantiles. p parameter p. , b parameters b. Must positive. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. seed Seed random generation. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). prob vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"dgig gives density, pgig gives distribution function, qgig gives quantile function, rgig generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rgig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"generalised inverse-Gaussian distribution density given  $$f(x; p, , b) = ((/b)^{p/2})/(2K_p(\\sqrt{ab})) x^{p-1} \\exp\\{-(/2)x - (b/2)/x\\},$$  \\(K_p\\) modified Bessel function second kind order \\(p\\),  \\(x>0\\), \\(,b>0\\) \\(p\\\\mathbb{R}\\).  See Jørgensen (1982) details.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"Jørgensen, Bent (1982). Statistical Properties Generalized Inverse Gaussian Distribution. Lecture Notes Statistics. 9. New York–Berlin: Springer-Verlag. doi:10.1007/978-1-4612-5698-4","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/gig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalised Inverse-Gaussian (GIG) Distribution — gig","text":"","code":"rgig(100, p = 1, a = 1, b = 1) #>   [1]  1.4276884  2.4052870  1.8706530  2.8824215  2.8988477  6.2907525 #>   [7]  1.7140946  1.8335973  0.9591576  5.4493112  2.7818586  6.2437283 #>  [13]  5.8719516  1.1313466  2.9103805  4.6705729  0.6273167  3.7215605 #>  [19]  3.9579333  2.4390365  0.8509802  4.1846867  2.2712178  2.2866041 #>  [25]  1.8864594  2.6476883  3.0765229  2.6118378  0.8317424  1.3881043 #>  [31]  1.0470207  5.7655246  4.2531510  2.5833055  1.9022501  0.5049390 #>  [37]  0.8907609  3.4120145  1.5285790  8.1398551  1.8624949  3.1988949 #>  [43]  3.7009098  0.8282474  3.1456827  0.6842890  1.0505034 11.4000079 #>  [49]  1.1916939  6.2746590  1.4426717  4.0052594  4.8725644  2.1146193 #>  [55]  5.2972489  3.4295551  3.5502742  3.3741567  0.5416842  0.1937721 #>  [61]  0.9737318  4.2813281  2.9929102  5.5765132  1.2949184  2.2247682 #>  [67]  9.7740488  0.6827323 10.0300124  1.2985511  8.6880914  1.4329001 #>  [73]  1.6845776  6.2291444  9.5273039  0.8319661  1.9829028  8.8487197 #>  [79]  2.8500942  1.1836983  2.6818869  2.1758516  6.0413409  1.1082286 #>  [85]  2.8445530  1.9164128  1.1598683  1.2138036  0.7659822  6.1103493 #>  [91]  3.5978231  0.4768146  1.4596364  4.9729517  1.0430458  3.3576905 #>  [97]  1.7007053  2.5947646  0.7569396  4.9304984 pgig(0.4, p = 1, a = 1, b = 1) #> [1] 0.02956016 qgig(0.8, p = 1, a = 1, b = 1) #> [1] 4.055929 plot(function(x){dgig(x, p = 1, a = 1, b = 1)}, main = \"Generalised inverse-Gaussian density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse-Gaussian (IG) Distribution — ig","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"Density, distribution function, quantile function random generation inverse-Gaussian distribution  parameters b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"","code":"dig(x, a, b, log = FALSE)  rig(n, a, b, seed = 0)  pig(q, a, b, lower.tail = TRUE, log.p = FALSE)  qig(p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"x, q vector quantiles. , b parameters b. Must positive. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. seed Seed random generation. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). p vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"dig gives density, pig gives distribution function, qig gives quantile function, rig generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"inverse-Gaussian distribution density given  $$f(x; , b) = \\frac{\\sqrt{b}}{\\sqrt{2\\pi x^3}}\\exp(  -\\frac{}{2}x -\\frac{b}{2x} + \\sqrt{ab}),$$  \\(x>0\\) \\(,b>0\\). parameterization,  \\(E(X) = \\sqrt{b}/\\sqrt{}\\). See Tweedie (1957a, 1957b)  details.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"Tweedie, M. C. K. (1957a). \"Statistical Properties Inverse Gaussian Distributions \". Annals Mathematical Statistics. 28 (2): 362–377. doi:10.1214/aoms/1177706964 Tweedie, M. C. K. (1957b). \"Statistical Properties Inverse Gaussian Distributions II\". Annals Mathematical Statistics. 28 (3): 696–705. doi:10.1214/aoms/1177706881","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/ig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse-Gaussian (IG) Distribution — ig","text":"","code":"rig(100, a = 1, b = 1) #>   [1] 1.37278048 0.29431592 1.80081219 3.12230537 1.19674292 1.47005541 #>   [7] 1.24463691 0.76223649 0.25095494 0.33667212 0.52046496 1.31625521 #>  [13] 0.22482709 0.28486440 0.27741514 0.26083112 0.65826877 0.16009451 #>  [19] 0.76463972 0.51820377 1.80920711 0.34303598 0.37430289 0.79688708 #>  [25] 0.92554525 0.77534632 1.34762602 0.29965992 0.85851783 1.25938936 #>  [31] 0.77993209 0.73352868 0.18443802 0.18594593 0.31646284 0.17576494 #>  [37] 0.23887520 2.11467836 0.73321425 0.59581058 0.69316152 0.30459429 #>  [43] 0.64434936 0.39257251 2.92104418 1.38133438 1.32695335 0.35274065 #>  [49] 2.59043455 0.58794068 0.56057945 0.26821702 5.87745773 0.49131330 #>  [55] 2.09687774 0.74441374 0.36657710 0.25008786 0.19662600 1.40980454 #>  [61] 0.23405558 0.33032875 1.42025739 1.75875190 3.65579208 0.75849183 #>  [67] 3.19393175 0.36557383 0.11670614 1.64435434 0.73084215 0.76369417 #>  [73] 0.09231988 2.79931766 0.42071649 0.34520412 0.53756981 0.39263421 #>  [79] 3.45667431 1.57194505 0.84839477 0.31726236 0.66843372 1.11025730 #>  [85] 2.73282503 0.67752639 2.32358117 1.21487379 4.86263396 1.24731706 #>  [91] 0.61221988 1.71248682 1.00321838 0.30856495 0.11152233 0.83734227 #>  [97] 0.32459256 0.10320662 0.27589962 0.92584869 pig(0.4, a = 1, b = 1) #> [1] 0.2706137 qig(0.8, a = 1, b = 1) #> [1] 1.447891 plot(function(x){dig(x, a = 1, b = 1)}, main = \"Inverse-Gaussian density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse-Gamma (IGam) Distribution — igam","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"Density, distribution function, quantile function random generation inverse-Gamma distribution  parameters b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"","code":"digam(x, a, b, log = FALSE)  rigam(n, a, b)  pigam(q, a, b, lower.tail = TRUE, log.p = FALSE)  qigam(p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"x, q vector quantiles. , b parameters b. Must positive. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). p vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"digam gives density, pigam gives distribution function, qigam gives quantile function, rigam generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"inverse-Gamma distribution density given  $$f(x; , b) = \\frac{b^}{\\Gamma()}x^{-1}\\exp(  -\\frac{b}{x}),$$  \\(x>0\\) \\(,b>0\\).","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/igam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse-Gamma (IGam) Distribution — igam","text":"","code":"rigam(100, a = 1, b = 1) #>   [1]   1.2028122   0.3391072   0.3514576   1.4796638   6.2722286   0.9084625 #>   [7]   0.2929000  12.9348501   2.1120566   1.3800036   0.8063792   1.3443779 #>  [13]   0.8414746   1.6724340   2.3890204   0.8489825   1.0428569 358.2647215 #>  [19]   1.3038421   2.7623930   0.3361477   1.2151076   1.0409596  10.3629906 #>  [25]   6.4418203   0.5989548   1.8670891   1.0736097   5.4065790   3.0211716 #>  [31]  29.0690148   4.5927357   5.7319968   0.5159705   0.8591487   0.7587908 #>  [37]   1.1275418   3.4462907   2.4185380   3.7059208   3.2295833   0.3875513 #>  [43]   0.2208371   1.9380679   0.7897845   0.4625077   0.8925995   0.3720918 #>  [49]   0.6486476   0.5349495   2.6969272   1.4869459   1.5548784   1.9443438 #>  [55]   1.2199296  15.4455600   0.5268888   1.0201681   5.1806325   3.3854896 #>  [61]   2.2558220   5.9342593   0.9230286   1.0648045   3.7375306   0.9066313 #>  [67]   1.6805271   6.7242327   4.5432269   0.9254301   3.3435355   0.4779550 #>  [73]   1.0090001  10.5776037   2.8186513   2.8302946   2.3663941  15.3895885 #>  [79]   0.2482886   0.8839884   1.3132860   0.5935505   0.5754948   1.9695195 #>  [85]   1.4149004   0.7477972   0.9355693   2.2078382   1.0978417   2.5931904 #>  [91]   3.2615876   0.3956499  22.9756603   0.4593010   2.1715575   4.0995829 #>  [97]  10.8309313   2.9924350   0.5485224   7.1179255 pigam(0.4, a = 1, b = 1) #> [1] 0.082085 qigam(0.8, a = 1, b = 1) #> [1] 4.48142 plot(function(x){digam(x, a = 1, b = 1)}, main = \"Inverse-Gamma density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/mean_list.html","id":null,"dir":"Reference","previous_headings":"","what":"taking mean over a list of nested lists — mean_list","title":"taking mean over a list of nested lists — mean_list","text":"taking mean list nested lists","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/mean_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taking mean over a list of nested lists — mean_list","text":"","code":"mean_list(lls)"},{"path":"https://davidbolin.github.io/ngme2/reference/mean_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"taking mean over a list of nested lists — mean_list","text":"lls list","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/mean_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"taking mean over a list of nested lists — mean_list","text":"list nested lists","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/mean_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"taking mean over a list of nested lists — mean_list","text":"","code":"ls <- list(   list(a=1, b=2, t=\"nig\", ll=list(a=1,b=2, w=\"ab\")),   list(a=3, b=5, t=\"nig\", ll=list(a=1,b=6, w=\"ab\")),   list(a=5, b=5, t=\"nig\", ll=list(a=4,b=2, w=\"ab\")) ) mean_list(ls) #> $a #> [1] 3 #>  #> $b #> [1] 4 #>  #> $t #> [1] \"nig\" #>  #> $ll #> $ll$a #> [1] 2 #>  #> $ll$b #> [1] 3.333333 #>  #> $ll$w #> [1] \"ab\" #>  #>"},{"path":"https://davidbolin.github.io/ngme2/reference/model_ar1.html","id":null,"dir":"Reference","previous_headings":"","what":"ngme ar1 model specification — model_ar1","title":"ngme ar1 model specification — model_ar1","text":"Generating C, G given index replicates","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_ar1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ngme ar1 model specification — model_ar1","text":"","code":"model_ar1(   index,   replicates = NULL,   index_NA = NULL,   data = NULL,   noise = noise_normal(),   alpha = 0.5,   range = c(1, max(index)),   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/model_ar1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ngme ar1 model specification — model_ar1","text":"index index process replicates replicates process index_NA Logical vector, .na(response var.) data data, can specified f(), ngme() noise noise, can specified f() alpha initial value alpha range range mesh ... extra arguments f()","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_ar1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ngme ar1 model specification — model_ar1","text":"list specification model","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_ar1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ngme ar1 model specification — model_ar1","text":"","code":"model_ar1(index = c(1:3, 1:3), replicates = c(1,1,1,2,2,2)) #> as(<dgTMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"CsparseMatrix\") instead #> Ngme model: ar1 #> Model parameters:  #>     alpha = 0.5 #>  #> Noise type - normal #> Noise parameters:  #>     sigma = 1 f(index = xx, model = \"ar1\", data=list(xx = c(2,4,5)), noise=noise_nig()) #> Ngme model: ar1 #> Model parameters:  #>     alpha = 0.5 #>  #> Noise type - nig #> Noise parameters:  #>     mu = 0 #>     sigma = 1 #>     nu = 1"},{"path":"https://davidbolin.github.io/ngme2/reference/model_matern.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Matern SPDE model — model_matern","title":"Create a Matern SPDE model — model_matern","text":"Create Matern SPDE model","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_matern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Matern SPDE model — model_matern","text":"","code":"model_matern(   loc = NULL,   replicates = NULL,   alpha = 2,   kappa = 1,   theta_kappa = NULL,   B_kappa = NULL,   mesh = NULL,   fem.mesh.matrices = NULL,   d = NULL,   index_NA = NULL,   A = NULL,   A_pred = NULL,   noise = noise_normal(),   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/model_matern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Matern SPDE model — model_matern","text":"loc numeric vector matrix column 2,location make index replicates replicates process alpha 2 4, SPDE smoothness parameter kappa parameterization kappa^2 C + G, stationary theta_kappa parameterization non-stationary B_kappa bases kappa mesh mesh argument fem.mesh.matrices specify FEM matrices d indicating dimension mesh (together fem.mesh.matrices) index_NA Logical vector, .na(response var.) Matrix connecting observation mesh A_pred Matrix connecting NA location mesh noise 1. string: type model, 2. ngme.noise object ... extra arguments f()","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_matern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Matern SPDE model — model_matern","text":"list (n, C (diagonal), G, B.kappa) constructing operator","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_rw.html","id":null,"dir":"Reference","previous_headings":"","what":"ngme model - random walk of order 1 — model_rw","title":"ngme model - random walk of order 1 — model_rw","text":"Generating C, G given index replicates size C G (n-1) * n, size V n-1","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_rw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ngme model - random walk of order 1 — model_rw","text":"","code":"model_rw(   index,   order = 1,   replicates = NULL,   data = NULL,   circular = FALSE,   index_NA = NULL,   noise = noise_normal(),   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/model_rw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ngme model - random walk of order 1 — model_rw","text":"index numerical vector, index process order 1 2, order random walk model replicates replicates process data specifed inherit ngme formula circular whether mesh circular, .e. first one connected last index_NA Logical vector, .na(response variable) noise 1. string: type model, 2. ngme.noise object (can also specified ngme model) ... additional arguments","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_rw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ngme model - random walk of order 1 — model_rw","text":"list","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/model_rw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ngme model - random walk of order 1 — model_rw","text":"","code":"r1 <- model_rw(1:7, order = 1, circular = TRUE); r1$C + r1$G #> 6 x 6 sparse Matrix of class \"dgCMatrix\" #>                        #> [1,]  1 -1  .  .  .  . #> [2,]  .  1 -1  .  .  . #> [3,]  .  .  1 -1  .  . #> [4,]  .  .  .  1 -1  . #> [5,]  .  .  .  .  1 -1 #> [6,] -1  .  .  .  .  1 r2 <- model_rw(1:7, order = 1); r2$C + r2$G #> 6 x 7 sparse Matrix of class \"dgCMatrix\" #>                          #> [1,] 1 -1  .  .  .  .  . #> [2,] .  1 -1  .  .  .  . #> [3,] .  .  1 -1  .  .  . #> [4,] .  .  .  1 -1  .  . #> [5,] .  .  .  .  1 -1  . #> [6,] .  .  .  .  .  1 -1"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":null,"dir":"Reference","previous_headings":"","what":"Additive non-guassian model fitting — ngme","title":"Additive non-guassian model fitting — ngme","text":"ngme function performs analysis non-gaussian additive models.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additive non-guassian model fitting — ngme","text":"","code":"ngme(   formula,   data,   control = ngme_control(),   family = \"normal\",   last_fit = NULL,   beta = NULL,   seed = NULL,   start = NULL,   debug = FALSE )"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additive non-guassian model fitting — ngme","text":"formula formula data dataframe list providing data (response variable can contain NA value,  NA value columns cause problem) control control variables, see ?ngme.control family likelihood type, measurement noise specification, 1. string 2. ngme noise obejct last_fit can ngme object last fitting beta starting value fixed effects seed set seed pesudo random number generator start starting ngme object (usually object last fitting) debug toggle debug mode","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additive non-guassian model fitting — ngme","text":"list outputs contains estimation operator paramters, noise parameters","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additive non-guassian model fitting — ngme","text":"","code":"ngme(  formula = Y ~ x1 + f(    index = x2,    model = \"ar1\",    noise = noise_nig(),    theta_K = 0.5  ) + f(    model = model_rw(1:5, order=1, circular = TRUE),    noise = noise_normal(),  ),  family = noise_normal(sd = 0.5),  data = data.frame(Y = 1:5, x1 = 2:6, x2 = 3:7),  control = ngme_control(    estimation = FALSE  ) ) #> *** Ngme object *** #>  #> Fixed effects:  #>    beta = -1,  1 #>  #> Measurement noise:  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 0.5 #>  #>  #> Latent models:  #> [[1]] #>   Ngme model: ar1 #>   Model parameters:  #>       alpha = 0.5 #>  #>   Noise type - nig #>   Noise parameters:  #>       mu = 0 #>       sigma = 1 #>       nu = 1 #> [[2]] #>   Ngme model: rw1 #>   Model parameters:  #>       No parameter needed. #>  #>   Noise type - normal #>   Noise parameters:  #>       sigma = 1"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme2.html","id":null,"dir":"Reference","previous_headings":"","what":"ngme2 — ngme2","title":"ngme2 — ngme2","text":"Inference prediction mixed effects models flexible non-Gaussian Gaussian distributions.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ngme2 — ngme2","text":"David Bolin <davidbolin@gmail.com>","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_as_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sparse matrix into sparse dgCMatrix — ngme_as_sparse","title":"Convert sparse matrix into sparse dgCMatrix — ngme_as_sparse","text":"Convert sparse matrix sparse dgCMatrix","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_as_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sparse matrix into sparse dgCMatrix — ngme_as_sparse","text":"","code":"ngme_as_sparse(G)"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_as_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sparse matrix into sparse dgCMatrix — ngme_as_sparse","text":"G matrix","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_as_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert sparse matrix into sparse dgCMatrix — ngme_as_sparse","text":"sparse dgCMatrix","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate control specifications for ngme — ngme_control","title":"Generate control specifications for ngme — ngme_control","text":"Generate control specifications ngme","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate control specifications for ngme — ngme_control","text":"","code":"ngme_control(   burnin = 100,   iterations = 100,   gibbs_sample = 5,   stepsize = 1,   estimation = TRUE,   n_parallel_chain = 2,   stop_points = 10,   exchange_VW = TRUE,   n_slope_check = 3,   std_lim = 0.1,   trend_lim = 0.05,   print_check_info = TRUE,   opt_beta = TRUE,   fix_beta = FALSE,   max_relative_step = 0.1,   max_absolute_step = 0.5,   reduce_var = FALSE,   reduce_power = 0.75,   threshold = 1e-05,   window_size = 1 )"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate control specifications for ngme — ngme_control","text":"burnin burn-iterations iterations optimizing terations gibbs_sample number gibbs sampels stepsize stepsize estimation estimating parameters n_parallel_chain number parallel chains stop_points number stop points convergence check exchange_VW exchange last V W chian n_slope_check number stop points regression std_lim maximum allowed standard deviation trend_lim maximum allowed slope print_check_info print convergence information opt_beta logical, optimize fixed effect fix_beta logical, fix fixed effect max_relative_step max relative step allowed 1 iteration max_absolute_step max absolute step allowed 1 iteration reduce_var logical, reduce variace reduce_power numerical power reduce level threshold till start reduce variance window_size numerical, length window final estimates","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate control specifications for ngme — ngme_control","text":"list control variables","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control_f.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate control specifications for f function — ngme_control_f","title":"Generate control specifications for f function — ngme_control_f","text":"Generate control specifications f function","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control_f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate control specifications for f function — ngme_control_f","text":"","code":"ngme_control_f(   numer_grad = FALSE,   use_precond = FALSE,   use_num_hess = TRUE,   eps = 0.01 )"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control_f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate control specifications for f function — ngme_control_f","text":"numer_grad whether use numerical gradient use_precond whether use preconditioner use_num_hess whether use numerical hessian eps eps numerical gradient","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_control_f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate control specifications for f function — ngme_control_f","text":"list control variables","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_model_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Show ngme mdoel types — ngme_model_types","title":"Show ngme mdoel types — ngme_model_types","text":"Show ngme mdoel types","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_model_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show ngme mdoel types — ngme_model_types","text":"","code":"ngme_model_types()"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_model_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show ngme mdoel types — ngme_model_types","text":"available types models","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"ngme noise specification — ngme_noise","title":"ngme noise specification — ngme_noise","text":"Function specifying ngme noise. Please use noise_type simpler specification. Use ngme_noise_types() check available types.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ngme noise specification — ngme_noise","text":"","code":"ngme_noise(   noise_type,   theta_mu = 0,   theta_sigma = 0,   theta_V = 1,   n = 1,   V = NULL,   B_mu = NULL,   B_sigma = NULL,   fix_theta_mu = FALSE,   fix_theta_sigma = FALSE,   fix_theta_V = FALSE,   fix_V = FALSE,   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ngme noise specification — ngme_noise","text":"noise_type type noise, \"nig\", \"normal\" theta_mu specify non-stationary noise using theta_mu theta_sigma specify non-stationary noise using theta_sigma theta_V value theta_V, theta_V = nu > 0 n number noise (= nrow(B_mu) = nrow(B_sigma)) V value V B_mu Basis matrix mu (non-stationary) B_sigma Basis matrix sigma (non-stationary) fix_theta_mu fix parameter theta_mu fix_theta_sigma fix parameter theta_sigma fix_theta_V fix parameter theta_V fix_V fix sampling V ... additional arguments","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ngme noise specification — ngme_noise","text":"list specification noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise_types.html","id":null,"dir":"Reference","previous_headings":"","what":"show ngme noise types — ngme_noise_types","title":"show ngme noise types — ngme_noise_types","text":"show ngme noise types","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show ngme noise types — ngme_noise_types","text":"","code":"ngme_noise_types()"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_noise_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"show ngme noise types — ngme_noise_types","text":"available types noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_parse_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the formula for ngme function — ngme_parse_formula","title":"Parse the formula for ngme function — ngme_parse_formula","text":"Parse formula ngme function","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_parse_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the formula for ngme function — ngme_parse_formula","text":"","code":"ngme_parse_formula(gf, data)"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_parse_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the formula for ngme function — ngme_parse_formula","text":"gf formula data data.frame","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_parse_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse the formula for ngme function — ngme_parse_formula","text":"1. plain formula without f function  2. latents_in - f function","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_ts_make_A.html","id":null,"dir":"Reference","previous_headings":"","what":"Make observation matrix for time series — ngme_ts_make_A","title":"Make observation matrix for time series — ngme_ts_make_A","text":"Make observation matrix time series","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_ts_make_A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make observation matrix for time series — ngme_ts_make_A","text":"","code":"ngme_ts_make_A(loc, replicates = NULL, range = c(1, max(loc)))"},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_ts_make_A.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make observation matrix for time series — ngme_ts_make_A","text":"loc integers (sorting, gaps > 1) replicates indicating replicate measure location range range mesh default range=(min(loc), max(loc))","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_ts_make_A.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make observation matrix for time series — ngme_ts_make_A","text":"matrix (length(loc) * length(unique(loc)))","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/ngme_ts_make_A.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make observation matrix for time series — ngme_ts_make_A","text":"","code":"ngme_ts_make_A(c(1, 2, 2), replicates = c(1, 1, 2)) #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>              #> [1,] 1 . . . #> [2,] . 1 . . #> [3,] . . . 1 ngme_ts_make_A(c(1, 2, 2), range = c(1, 5)) #> 3 x 5 sparse Matrix of class \"dgCMatrix\" #>                #> [1,] 1 . . . . #> [2,] . 1 . . . #> [3,] . 1 . . ."},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":null,"dir":"Reference","previous_headings":"","what":"The Normal Inverse-Gaussian (GIG) Distribution — nig","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"Density, distribution function, quantile function random generation normal inverse-Gaussian distribution  parameters p, b.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"","code":"dnig(x, delta, mu, nu, sigma, log = FALSE)  rnig(n, delta, mu, nu, sigma, seed = 0)  pnig(q, delta, mu, nu, sigma, lower.tail = TRUE, log.p = FALSE)  qnig(p, delta, mu, nu, sigma, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"x, q vector quantiles. delta numeric value location parameter. mu numeric value shift parameter. nu numeric value shape parameter. sigma numeric value scaling parameter. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(log(p)\\). n, number observations. seed Seed random generation. lower.tail logical; TRUE, probabilities \\(P[X\\leq x]\\), otherwise, \\(P[X>x]\\). p vector probabilities.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"dnig gives density, pnig gives distribution function, qnig gives quantile function, rnig generates random deviates. Invalid arguments result return value NaN, warning. length result determined n rnig.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"normal inverse-Gaussian distribution density given  $$f(x; p, , b) =  \\frac{e^{\\nu+\\mu(x-\\delta)/\\sigma^2}\\sqrt{\\nu\\mu^2/\\sigma^2+\\nu^2}}{\\pi\\sqrt{\\nu\\sigma^2+(x-\\delta)^2}}  K_1(\\sqrt{(\\nu\\sigma^2+(x-\\delta)^2)(\\mu^2/\\sigma^4+\\nu/\\sigma^2)}),$$  \\(K_p\\) modified Bessel function second kind order \\(p\\),  \\(x>0\\), \\(\\nu>0\\) \\(\\mu,\\delta, \\sigma\\\\mathbb{R}\\).  See Barndorff-Nielsen (1977, 1978 1997) details.","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"Barndorff-Nielsen, O. (1977) Exponentially decreasing distributions logarithm particle size. Proceedings Royal Society London. Series , Mathematical Physical Sciences. Royal Society. 353, 401–409. doi:10.1098/rspa.1977.0041 Barndorff-Nielsen, O. (1978) Hyperbolic Distributions Distributions Hyperbolae, Scandinavian Journal Statistics. 5, 151–157. Barndorff-Nielsen, O. (1997) Normal Inverse Gaussian Distributions Stochastic Volatility Modelling, Scandinavian Journal Statistics. 24, 1-13. doi:10.1111/1467-9469.00045","code":""},{"path":[]},{"path":"https://davidbolin.github.io/ngme2/reference/nig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Normal Inverse-Gaussian (GIG) Distribution — nig","text":"","code":"rnig(100, delta = 0, mu = 5, sigma = 1, nu = 1) #>   [1]  3.01953683 19.49584440  0.07898609  1.78446650  5.78525455  6.02526902 #>   [7]  0.18558717  1.45574810  5.20164105  0.37894079  3.87501745  2.41959888 #>  [13]  4.05504001  1.74009288  2.56001307  2.41775922  5.50160750  1.97778018 #>  [19] 11.82564928  2.85916272  3.68621149  4.01936241  0.91801018  1.45308679 #>  [25]  1.70661240  0.00548256  3.99977152  9.27522447  8.86140300  3.62721815 #>  [31]  8.05791873  3.65832796  1.06490763  3.25558680  1.57879528  1.25792894 #>  [37]  1.92176463 10.37648688  3.76520671 12.49238741  4.85862317  3.54874350 #>  [43] 13.73709031  3.22328438  7.04270641  1.62678990  3.46966654  4.93121375 #>  [49]  7.43278477  3.03954172  2.81406035  0.10248976  2.30376805  6.33767062 #>  [55]  4.66326237  5.86532460  7.80173328  1.64043176  9.41019257  3.46091173 #>  [61]  9.17920339  5.97997667  4.12967462  0.94719999  2.80841173  2.45289556 #>  [67]  2.21747315  5.98713683  4.39030883  8.80608568  1.79204884  0.28732709 #>  [73]  8.80100190  2.45751964  1.13637522  3.67358966  1.78707934  5.07427751 #>  [79]  1.10722589  3.93228120  6.16605140  1.01547587  0.40117267  0.84660181 #>  [85]  2.09161904  4.98719754  1.86245073  7.81752652  3.85335711  0.98173877 #>  [91]  3.18895533 12.28843171  4.70373173  4.13882357  2.39076819 10.37170587 #>  [97]  1.32710971  3.66402345  1.42976938  2.58279191 pnig(0.4, delta = 0, mu = 5, sigma = 1, nu = 1) #> [1] 0.01597497 qnig(0.8, delta = 0, mu = 5, sigma = 1, nu = 1) #> [1] 7.390234 plot(function(x){dnig(x, delta = 0, mu = 5, sigma = 1, nu = 1)}, main = \"Normal inverse-Gaussian density\", ylab = \"Probability density\", xlim = c(0,10))"},{"path":"https://davidbolin.github.io/ngme2/reference/noise_nig.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a nig noise (normal inverse Gaussian) — noise_nig","title":"Specify a nig noise (normal inverse Gaussian) — noise_nig","text":"parameterization can found ...","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/noise_nig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a nig noise (normal inverse Gaussian) — noise_nig","text":"","code":"noise_nig(   mu = NULL,   sigma = NULL,   nu = NULL,   n = 1,   V = NULL,   theta_mu = NULL,   theta_sigma = NULL,   B_mu = matrix(1),   B_sigma = matrix(1),   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/noise_nig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a nig noise (normal inverse Gaussian) — noise_nig","text":"mu mu parameter (stationary) sigma sigma parameter (stationary) nu nu n number noise (= nrow(B_mu) = nrow(B_sigma)) V value V theta_mu specify non-stationary noise using theta_mu theta_sigma specify non-stationary noise using theta_sigma B_mu Basis matrix mu (non-stationary) B_sigma Basis matrix sigma (non-stationary) ... additional arguments","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/noise_nig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a nig noise (normal inverse Gaussian) — noise_nig","text":"ngme_noise object","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/noise_nig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a nig noise (normal inverse Gaussian) — noise_nig","text":"","code":"noise_nig(mu = 1, sigma = 2, nu = 1, n=10) #> Noise type - nig #> Noise parameters:  #>     mu = 1 #>     sigma = 2 #>     nu = 1"},{"path":"https://davidbolin.github.io/ngme2/reference/noise_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a normal noise — noise_normal","title":"Specify a normal noise — noise_normal","text":"Specify normal noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/noise_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a normal noise — noise_normal","text":"","code":"noise_normal(   sd = NULL,   theta_sigma = NULL,   B_sigma = matrix(1, 1, 1),   n = nrow(B_sigma),   ... )"},{"path":"https://davidbolin.github.io/ngme2/reference/noise_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a normal noise — noise_normal","text":"sd standard deviation theta_sigma specify non-stationary noise using theta_sigma B_sigma Basis matrix sigma (non-stationary) n number noise (= nrow(B_mu) = nrow(B_sigma)) ... additional arguments","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/noise_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a normal noise — noise_normal","text":"ngme_noise object","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/noise_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a normal noise — noise_normal","text":"","code":"noise_normal(n = 10, sd = 2) #> Noise type - normal #> Noise parameters:  #>     sigma = 2"},{"path":"https://davidbolin.github.io/ngme2/reference/plot.ngme_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"plot the density of noise (for stationary) — plot.ngme_noise","title":"plot the density of noise (for stationary) — plot.ngme_noise","text":"plot density noise (stationary)","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/plot.ngme_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot the density of noise (for stationary) — plot.ngme_noise","text":"","code":"# S3 method for ngme_noise plot(x, y = NULL, ...)"},{"path":"https://davidbolin.github.io/ngme2/reference/plot.ngme_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot the density of noise (for stationary) — plot.ngme_noise","text":"x ngme_noise y another ngme_noise ... ...","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/plot.ngme_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot the density of noise (for stationary) — plot.ngme_noise","text":"plot","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/plot.ngme_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot the density of noise (for stationary) — plot.ngme_noise","text":"","code":"plot(noise_nig(mu=1, sigma=2, nu=1))"},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ngme object — print.ngme","title":"Print ngme object — print.ngme","text":"Print ngme object","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ngme object — print.ngme","text":"","code":"# S3 method for ngme print(x, ...)"},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ngme object — print.ngme","text":"x ngme object ... ignored","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ngme object — print.ngme","text":"list (noise specifications)","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ngme model — print.ngme_model","title":"Print ngme model — print.ngme_model","text":"Print ngme model","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ngme model — print.ngme_model","text":"","code":"# S3 method for ngme_model print(x, padding = 0, ...)"},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ngme model — print.ngme_model","text":"x ngme model object padding number white space padding front ... ...","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ngme model — print.ngme_model","text":"list (model specifications)","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ngme noise — print.ngme_noise","title":"Print ngme noise — print.ngme_noise","text":"Print ngme noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ngme noise — print.ngme_noise","text":"","code":"# S3 method for ngme_noise print(x, padding = 0, ...)"},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ngme noise — print.ngme_noise","text":"x noise object padding number white space padding front ... ...","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/print.ngme_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ngme noise — print.ngme_noise","text":"list (noise specifications)","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate latent process with noise — simulate.ngme_model","title":"Simulate latent process with noise — simulate.ngme_model","text":"Simulate latent process noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate latent process with noise — simulate.ngme_model","text":"","code":"# S3 method for ngme_model simulate(object, nsim = 1, seed = NULL, ...)"},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate latent process with noise — simulate.ngme_model","text":"object ngme model specified f() function nsim ignored seed seed ... ignored","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate latent process with noise — simulate.ngme_model","text":"realization latent model","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate latent process with noise — simulate.ngme_model","text":"","code":"B_sigma <- matrix(1:10 / 10, nrow=10) simulate(noise_nig(n = 10, B_sigma =  B_sigma)) #>  [1]  0.4017842  0.9604084  1.3976883  1.1829640  0.7352577 -0.8481602 #>  [7] -0.6979839  1.9321212  0.8133945  0.2193638 #> attr(,\"noise\") #> Noise type - nig #> Noise parameters:  #>     mu = 0 #>     sigma = 1 #>     nu = 1 simulate(noise_normal(theta_sigma = 1.5, B_sigma = B_sigma)) #>  [1] -0.906298  1.996804  1.679300  0.466826  2.552181  2.617774  5.492899 #>  [8]  3.579275 -3.043191 -3.672422 #> attr(,\"noise\") #> Noise type - normal #> Noise parameters:  #>     sigma = 4.48 simulate(f(1:10, model = \"ar1\", theta_K = 0.4, noise = noise_nig())) #>  [1] -0.3510694 -1.1430842 -1.4618240 -1.3758553 -0.1627477 -0.1566484 #>  [7]  0.4287825  0.5058091 -0.4053098  0.3135500 #> attr(,\"noise\") #> Noise type - nig #> Noise parameters:  #>     mu = 0 #>     sigma = 1 #>     nu = 1"},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate ngme noise — simulate.ngme_noise","title":"Simulate ngme noise — simulate.ngme_noise","text":"Simulate ngme noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate ngme noise — simulate.ngme_noise","text":"","code":"# S3 method for ngme_noise simulate(object, nsim = 1, seed = NULL, ...)"},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate ngme noise — simulate.ngme_noise","text":"object ngme noise object nsim ignored seed seed ... ignored","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate ngme noise — simulate.ngme_noise","text":"realization ngme noise","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/simulate.ngme_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate ngme noise — simulate.ngme_noise","text":"","code":"simulate(noise_normal(sd = 5, n = 10)) #>  [1] -4.7483433  2.7609009  2.5048823  2.2622849  1.5322794 -5.4498456 #>  [7] -0.3468713 -2.4761993 15.6465317  4.7153715 #> attr(,\"noise\") #> Noise type - normal #> Noise parameters:  #>     sigma = 5"},{"path":"https://davidbolin.github.io/ngme2/reference/traceplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace plot of ngme fitting — traceplot","title":"Trace plot of ngme fitting — traceplot","text":"Trace plot ngme fitting","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/traceplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace plot of ngme fitting — traceplot","text":"","code":"traceplot(ngme, parameter, f_index = 0, param_index = 1, transform = identity)"},{"path":"https://davidbolin.github.io/ngme2/reference/traceplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace plot of ngme fitting — traceplot","text":"ngme ngme object parameter parameter name f_index index process, 0 stands fixed effects measurement noise param_index paramter index non-stationary transform transformation","code":""},{"path":"https://davidbolin.github.io/ngme2/reference/traceplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace plot of ngme fitting — traceplot","text":"traceplot","code":""},{"path":"https://davidbolin.github.io/ngme2/news/index.html","id":"ngme2-development-version","dir":"Changelog","previous_headings":"","what":"ngme2 (development version)","title":"ngme2 (development version)","text":"First version package","code":""}]
